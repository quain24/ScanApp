using FluentAssertions;
using ScanApp.Domain.Entities;
using System;
using Xunit;

namespace ScanApp.Tests.UnitTests.Domain.Entities
{
    public class SparePartTests
    {
        [Fact]
        public void Will_create_spare_part()
        {
            var subject = new SparePart("SparePart", 10, "artId1", "strPlace1");

            subject.Should().NotBeNull();
            subject.Id.Should().BeNullOrEmpty("id is generated by database");
        }

        [Theory]
        [InlineData(0)]
        [InlineData(-5)]
        public void Does_not_allow_le_0_amount(int amount)
        {
            Action act = () => new SparePart("SparePart", amount, "artId1", "strPlace1");
            act.Should().Throw<ArgumentOutOfRangeException>("cannot create spare parts with amount of 0 or less");
        }

        [Theory]
        [InlineData(0)]
        [InlineData(-5)]
        public void Does_not_allow_le_0_amount_set_by_property(int amount)
        {
            var subject = new SparePart("SparePart", 1, "artId1", "strPlace1");

            Action act = () => subject.Amount = amount;
            act.Should().Throw<ArgumentOutOfRangeException>("cannot create spare parts with amount of 0 or less");
        }

        [Theory]
        [InlineData("")]
        [InlineData("  ")]
        [InlineData(null)]
        public void Does_not_allow_empty_name(string name)
        {
            Action act = () => new SparePart(name, 1, "artId1", "strPlace1");
            act.Should().Throw<ArgumentOutOfRangeException>("spare part needs a name");
        }

        [Theory]
        [InlineData("")]
        [InlineData("  ")]
        [InlineData(null)]
        public void Does_not_allow_empty_name_set_by_property(string name)
        {
            var subject = new SparePart("name", 1, "artId1", "strPlace1");

            Action act = () => subject.Name = name;

            act.Should().Throw<ArgumentOutOfRangeException>("spare part needs a name");
        }
    }
}
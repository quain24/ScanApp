// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScanApp.Infrastructure.Persistence;

namespace ScanApp.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210902102040_Hes-Departure_plans-Add_timezone_and_IsAllDay_fields_to_occurrence")]
    partial class HesDeparture_plansAdd_timezone_and_IsAllDay_fields_to_occurrence
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeparturePlanSeason", b =>
                {
                    b.Property<int>("DeparturePlansId")
                        .HasColumnType("int");

                    b.Property<string>("SeasonsName")
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("DeparturePlansId", "SeasonsName");

                    b.HasIndex("SeasonsName");

                    b.ToTable("DeparturePlanSeason", "hub");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "sca");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ClaimType", "ClaimValue");

                    b.ToTable("UserRoleClaims", "sca");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ClaimType", "ClaimValue");

                    b.ToTable("UserClaims", "sca");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "sca");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "sca");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "sca");
                });

            modelBuilder.Entity("ScanApp.Application.Common.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "sca");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ClaimsSource", "sca");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.DeparturePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepotId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDateUTC");

                    b.Property<string>("EndTimeZone")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("EndDateTimeZone");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsException")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CASE WHEN ([RecurrenceExceptionOfId] IS NULL) OR ([RecurrenceExceptionDate] IS NULL) THEN 0 ELSE 1 END", true);

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("RecurrenceExceptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecurrenceExceptionOfId")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceExceptions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExceptionsToPatternOccurrenceUTC")
                        .HasComment("Timestamps stored in this column are in UTC time format.");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDateUTC");

                    b.Property<string>("StartTimeZone")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("StartDateTimeZone");

                    b.Property<int>("TrailerTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Row version is converted to 'Version' object in ScanApp");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("GateId");

                    b.HasIndex("RecurrenceExceptionOfId");

                    b.HasIndex("TrailerTypeId");

                    b.ToTable("DeparturePlans", "hub");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.Depot", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultGateId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultTrailerId")
                        .HasColumnType("int");

                    b.Property<double>("DistanceFromHub")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Row version is converted to 'Version' object in ScanApp");

                    b.HasKey("Id");

                    b.HasIndex("DefaultGateId");

                    b.HasIndex("DefaultTrailerId");

                    b.ToTable("Depots", "hub");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.Gate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Row version is converted to 'Version' object in ScanApp");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Gates", "hub");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Locations", "sca");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.Season", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDateUTC");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDateUTC");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Row version is converted to 'Version' object in ScanApp");

                    b.HasKey("Name");

                    b.ToTable("Seasons", "hub");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.SparePart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceArticleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartStoragePlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SparePartStoragePlaceId");

                    b.ToTable("SpareParts", "sca");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.SparePartStoragePlace", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("Name", "LocationId")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [LocationId] IS NOT NULL");

                    b.ToTable("SparePartStoragePlaces", "sca");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.SparePartType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("SparePartTypes", "sca");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.TrailerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoadingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<float>("MaxVolume")
                        .HasColumnType("real");

                    b.Property<float>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnloadingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Row version is converted to 'Version' object in ScanApp");

                    b.HasKey("Id");

                    b.ToTable("Trailers", "hub");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.UserLocation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLocations", "sca");
                });

            modelBuilder.Entity("DeparturePlanSeason", b =>
                {
                    b.HasOne("ScanApp.Domain.Entities.DeparturePlan", null)
                        .WithMany()
                        .HasForeignKey("DeparturePlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScanApp.Domain.Entities.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScanApp.Domain.Entities.Claim", null)
                        .WithMany()
                        .HasForeignKey("ClaimType", "ClaimValue")
                        .HasPrincipalKey("Type", "Value")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScanApp.Application.Common.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScanApp.Domain.Entities.Claim", null)
                        .WithMany()
                        .HasForeignKey("ClaimType", "ClaimValue")
                        .HasPrincipalKey("Type", "Value")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScanApp.Application.Common.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScanApp.Application.Common.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScanApp.Application.Common.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.DeparturePlan", b =>
                {
                    b.HasOne("ScanApp.Domain.Entities.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScanApp.Domain.Entities.Gate", "Gate")
                        .WithMany()
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScanApp.Domain.Entities.DeparturePlan", "RecurrenceExceptionOf")
                        .WithMany()
                        .HasForeignKey("RecurrenceExceptionOfId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ScanApp.Domain.Entities.TrailerType", "TrailerType")
                        .WithMany()
                        .HasForeignKey("TrailerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ScanApp.Domain.ValueObjects.DayAndTime", "ArrivalTimeAtDepot", b1 =>
                        {
                            b1.Property<int>("DeparturePlanId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Day")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ArrivalTimeAtDepotDay")
                                .HasComment("Field is mapped to ScanApp 'Day' enumeration.");

                            b1.Property<TimeSpan>("Time")
                                .HasColumnType("time")
                                .HasColumnName("ArrivalTimeAtDepotTime");

                            b1.HasKey("DeparturePlanId");

                            b1.ToTable("DeparturePlans");

                            b1.WithOwner()
                                .HasForeignKey("DeparturePlanId");
                        });

                    b.OwnsOne("ScanApp.Domain.ValueObjects.RecurrencePattern", "RecurrencePattern", b1 =>
                        {
                            b1.Property<int>("DeparturePlanId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int?>("ByDay")
                                .HasColumnType("int")
                                .HasColumnName("RecurrenceByDay");

                            b1.Property<int?>("ByMonth")
                                .HasColumnType("int")
                                .HasColumnName("RecurrenceByMonth");

                            b1.Property<int?>("ByMonthDay")
                                .HasColumnType("int")
                                .HasColumnName("RecurrenceByMonthDay");

                            b1.Property<int?>("Count")
                                .HasColumnType("int")
                                .HasColumnName("RecurrenceCountLimit");

                            b1.Property<int?>("Interval")
                                .HasColumnType("int")
                                .HasColumnName("RecurrenceInterval");

                            b1.Property<int?>("OnWeek")
                                .HasColumnType("int")
                                .HasColumnName("RecurrenceOnWeek");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("RecurrenceType");

                            b1.Property<DateTime?>("Until")
                                .HasColumnType("datetime2")
                                .HasColumnName("RecurrenceEndDateUTC");

                            b1.HasKey("DeparturePlanId");

                            b1.ToTable("DeparturePlans");

                            b1.WithOwner()
                                .HasForeignKey("DeparturePlanId");
                        });

                    b.Navigation("ArrivalTimeAtDepot")
                        .IsRequired();

                    b.Navigation("Depot");

                    b.Navigation("Gate");

                    b.Navigation("RecurrenceExceptionOf");

                    b.Navigation("RecurrencePattern")
                        .IsRequired();

                    b.Navigation("TrailerType");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.Depot", b =>
                {
                    b.HasOne("ScanApp.Domain.Entities.Gate", "DefaultGate")
                        .WithMany()
                        .HasForeignKey("DefaultGateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ScanApp.Domain.Entities.TrailerType", "DefaultTrailer")
                        .WithMany()
                        .HasForeignKey("DefaultTrailerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("ScanApp.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("DepotId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Country");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("StreetName");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("DepotId");

                            b1.ToTable("Depots");

                            b1.WithOwner()
                                .HasForeignKey("DepotId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("DefaultGate");

                    b.Navigation("DefaultTrailer");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.SparePart", b =>
                {
                    b.HasOne("ScanApp.Domain.Entities.SparePartType", null)
                        .WithMany()
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScanApp.Domain.Entities.SparePartStoragePlace", null)
                        .WithMany()
                        .HasForeignKey("SparePartStoragePlaceId");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.SparePartStoragePlace", b =>
                {
                    b.HasOne("ScanApp.Domain.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("ScanApp.Domain.Entities.UserLocation", b =>
                {
                    b.HasOne("ScanApp.Domain.Entities.Location", null)
                        .WithOne()
                        .HasForeignKey("ScanApp.Domain.Entities.UserLocation", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScanApp.Application.Common.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ScanApp.Domain.Entities.UserLocation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

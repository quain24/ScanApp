@page "/hesscheduler"
@using ScanApp.Components.Scheduler
@using ScanApp.Models.Scheduler
<style>
    table {
        font-family: arial, sans-serif;
        width: 100%;
        border-spacing: 0 7px;
        table-layout: fixed;
    }

    td, th {
        border: 1px solid lightgray;
        text-align: center;
        overflow: hidden;
    }

    .header {
        padding: 20px;
        background: #479cc8;
        color: white;
        font-size: 20px;
        text-align: left;
    }

    .wrapper {
        display: flex;
        justify-content: space-between;
    }

    .wrapper-content {
        flex: 0 0 100%;
        padding-left: -14px;
    }

    .wrapper-header-content {
        flex: 0 0 auto;
    }

    div#current-date-picker .mud-icon-root.mud-svg-icon {
        fill: white;
    }

    div#current-date-picker .mud-input, input.mud-input-root, div.mud-input-slot.mud-input-root input{
        color: white;
    }

    div#current-date-picker .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: white;
    }


    @@media screen and (max-width: 1550px) {
        div#depot-header {
            content: none;
        }
    }
</style>

<div class="header wrapper" style="justify-content: space-evenly">
    <h1 class="wrapper-header-content">HES Scheduler</h1>
    <div id="current-date-picker" class="wrapper-header-content">
        <MudDatePicker PickerVariant="PickerVariant.Dialog"
                       ShowWeekNumbers="true" Label="Day" @bind-Date="_currentDate"></MudDatePicker>
    </div>
    <div class="wrapper-header-content">
        <MudFab Size="Size.Small" Style="background-color: #4ba7d6; color: white;" OnClick="() => ChangeDate(_currentDate.Value.AddDays(-1))"
                   Icon="@Icons.Rounded.ArrowLeft"></MudFab>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: #4ba7d6; color: white;" OnClick="() => ChangeDate(DateTime.Today)"
                   StartIcon="@Icons.Rounded.CalendarToday">Today</MudButton>
        <MudFab Size="Size.Small" Style="background-color: #4ba7d6; color: white;" OnClick="() => ChangeDate(_currentDate.Value.AddDays(1))"
                   Icon="@Icons.Rounded.ArrowRight"></MudFab>
    </div>
</div>
<table class="table">
    <thead>
    <tr>
        <div class="wrapper">
            <div id="depot-header" class="wrapper-content" style="font-size: large; padding-left: 15px;">Depot</div>
            <div class="wrapper-content" style="margin-left: -12px;">5:00</div>
            <div class="wrapper-content">6:00</div>
            <div class="wrapper-content">7:00</div>
            <div class="wrapper-content">8:00</div>
            <div class="wrapper-content">9:00</div>
            <div class="wrapper-content" style="margin-left: -5px;">10:00</div>
            <div class="wrapper-content">11:00</div>
            <div class="wrapper-content">12:00</div>
            <div class="wrapper-content">13:00</div>
            <div class="wrapper-content">14:00</div>
            <div class="wrapper-content">15:00</div>
            <div class="wrapper-content">16:00</div>
            <div class="wrapper-content">17:00</div>
            <div class="wrapper-content">18:00</div>
            <div class="wrapper-content">19:00</div>
            <div class="wrapper-content">20:00</div>
        </div>
    </tr>
    </thead>
    <tbody>
    @foreach (var depotID in _depotIDs)
    {
        <tr>
            <th style="width: 3%; font-size: x-large;">
                @depotID.ToString()
            </th>
            @foreach (var hour in _hoursArrayInts)
            {
                <th>
                    <EventSquare AppointmentAdded="AddAppointment" AppointmentDeleted="DeleteAppointment" DataHasChanged="UpdateAppointment" DateFrom="@GetTimeSlotDate(hour)" 
                                 DepotID="@depotID" DateTo="@GetTimeSlotDate(hour + 1)" Appointment="@GetHesAppointment(depotID, hour)" />
                </th>
            }
        </tr>
    }
    </tbody>
</table>

@code {

    static string[] _hoursArray =
    {
        "5:00", "6:00", "7:00", "8:00", "9:00", "10:00",
        "11:00", "12:00", "13:00", "14:00", "15:00",
        "16:00", "17:00", "18:00", "19:00", "20:00"
    };

    static private int[] _hoursArrayInts =
    {
        5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20
    };

    private List<string> _hours = new List<string>(_hoursArray);
    private List<int> _hoursInt = new List<int>(_hoursArrayInts);
    private DateTime? _currentDate = new DateTime(2021, 7, 20);
    int[] _depotIDs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    public List<HesAppointmentModel> AppointmentList = new List<HesAppointmentModel>();

    protected override void OnInitialized()
    {
        AppointmentList.Add(
            new HesAppointmentModel(new DateTime(2021, 7, 20), 10, 11, 2)
            {
                Company = "HSF",
                IdentificationNumber = "666",
                Spedition = "DHL"
            });

        AppointmentList.Add(
            new HesAppointmentModel(new DateTime(2021, 7, 20), 5, 6, 4)
            {
                Company = "Raumschmiede",
                IdentificationNumber = "777",
                Spedition = "Dachser"
            });
    }

    private DateTime GetTimeSlotDate(int hour)
    {
        var dateFrom = _currentDate.Value.Date;
        return dateFrom.AddHours(hour);
    }

    private HesAppointmentModel GetHesAppointment(int depotID, int hour)
    {
        foreach (var hesAppointment in AppointmentList)
        {
            if (hesAppointment.Date != _currentDate)
                continue;

            if (hesAppointment.DepotID == depotID && hesAppointment.TimeSlot.StartHour == hour)
                return hesAppointment;
        }
        return null;
    }

    private void UpdateAppointment(HesAppointmentModel appointment)
    {
        for (int i = 0; i < AppointmentList.Count; i++)
        {
            if (appointment.IdentificationNumber == AppointmentList[i].IdentificationNumber)
            {
                AppointmentList[i] = appointment;
                break;
            }
        }
        StateHasChanged();
    }

    private void DeleteAppointment(HesAppointmentModel appointment)
    {
        AppointmentList.Remove(appointment);
        StateHasChanged();
    }

    private void AddAppointment(HesAppointmentModel appointment)
    {
        AppointmentList.Add(appointment);
        StateHasChanged();
    }

    private void ChangeDate(DateTime newDate)
    {
        _currentDate = newDate;
        StateHasChanged();
    }
}

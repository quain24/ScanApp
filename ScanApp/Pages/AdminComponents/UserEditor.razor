@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Application.Admin.Commands.EditUserData
@using ScanApp.Common
@using Severity = MudBlazor.Severity

@inject IScopedMediator Mediator
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" lg="5" Class="px-1">
        <MudTable RowStyleFunc="RowStyleFunc" Breakpoint="Breakpoint.None" T="string" Items="@UserNames" @bind-SelectedItem="_selectedUserName" RowsPerPage="5"
                  Filter="new Func<string, bool>(FilterUsers)" OnRowClick="@FillUserData" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Users</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="_searchStringName" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="height: 51px;">@context</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" lg="7" Class="px-1">
        <MudCard Class="w-100 px-3 pt-2">
            <MudCardContent>
                <ScanApp.Pages.AdminComponents.UserDataForm @bind-Success="_success" @bind-User="_userData" EditingDisabled="@_editDisabled"/>
                <MudButton OnClick="@EditHandler" Class="mt-2" Variant="Variant.Filled" Color="Color.Error" Disabled="string.IsNullOrWhiteSpace(_userData.Name)">Remove user</MudButton>
            </MudCardContent>
            <MudCardActions>
                @if (_editVisible)
                {
                    <MudButton OnClick="@EditHandler" Class="ml-auto" Variant="Variant.Filled" Color="Color.Warning" Disabled="string.IsNullOrWhiteSpace(_userData.Name)">Edit user</MudButton>
                    <MudButton OnClick="@EditHandler" Class="ml-2" Variant="Variant.Filled" Color="Color.Success" Disabled="string.IsNullOrWhiteSpace(_userData.Name)">Add user</MudButton>
                    <MudButton OnClick="@EditHandler" Class="ml-2" Variant="Variant.Filled" Color="Color.Error" Disabled="string.IsNullOrWhiteSpace(_userData.Name)">Remove user</MudButton>
                }
                else
                {
                    <MudButton OnClick="@EditHandler" Class="ml-auto" Variant="Variant.Filled" Color="Color.Error" Disabled="string.IsNullOrWhiteSpace(_userData.Name)">Cancel edit</MudButton>
                }
                <MudButton OnClick="@SaveHandler" Class="ml-2 mr-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="!CanEnableSave()">Save changes</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public List<string> UserNames { get; set; }
    [Parameter]
    public EventCallback<List<string>> UserNamesChanged { get; set; }

    private bool _success = true;

    private UserInfoModel _userData = new();
    private UserInfoModel _originalUserData = new();
    private bool _editDisabled = true;
    private bool _editVisible = true;
    private bool _disableSave = true;
    private bool _disableUserChange = true;
    private string _selectedUserName;
    private string _searchStringName;
    private string _lastCheckedUserName;
    private bool _locked;

    private bool CanEnableSave()
    {
        if (_userData is null || _originalUserData is null)
            return false;
        return !_userData.EqualWithoutDate(_originalUserData) && _success && !_editDisabled;
    }

    private async Task EditHandler()
    {
        _editVisible = !_editVisible;
        _editDisabled = !_editDisabled;
        if (_editDisabled)
        {
            _userData = new UserInfoModel(_originalUserData);
        }
        else
        {
            _originalUserData = new UserInfoModel(_userData);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void SaveHandler()
    {
        var tmpData = new UserInfoModel(_userData);
        var res = await Mediator.SendScoped(new EditUserDataCommand(new EditUserDto(_originalUserData.Name)
        {
            Phone = tmpData.Phone,
            Location = tmpData.Location,
            Email = tmpData.Email,
            NewName = tmpData.Name
        }));

        if (res.Conclusion)
        {
            UserNames[UserNames.FindIndex(ind => ind.Equals(_originalUserData.Name))] = tmpData.Name;
            _originalUserData = _userData;
            await UserNamesChanged.InvokeAsync(UserNames);
            DisplaySuccess("User data has been updated.");
            await EditHandler();
            return;
        }

        DisplayError(res.ErrorDescription?.ErrorMessage ?? "Unknown error");
    }


    private async void FillUserData(TableRowClickEventArgs<string> args)
    {
        if (!_editDisabled)
        {
            _editDisabled = !_editDisabled;
            _editVisible = !_editVisible;
            _userData = _originalUserData;
        }

        if (_selectedUserName.Equals(_lastCheckedUserName))
            return;

        var result = await Mediator.SendScoped(new GetAllUserDataQuery(_selectedUserName));

        if (!result.Conclusion)
        {
            DisplayError(result.ErrorDescription?.ErrorMessage);
            return;
        }

        _userData = result.Output;
        _originalUserData = new UserInfoModel(result.Output);
        _lastCheckedUserName = _selectedUserName;
        await InvokeAsync(StateHasChanged);
    }

    private bool FilterUsers(string name)
    {
        if (string.IsNullOrWhiteSpace(_searchStringName))
            return true;
        return name?.Contains(_searchStringName, StringComparison.OrdinalIgnoreCase) ?? false;
    }

    private string RowStyleFunc(string rowValue, int rowNumber)
    {
        return rowValue.Equals(_selectedUserName)
            ? "background-color: lightgrey; color: white;"
            : string.Empty;
    }

    private void DisplaySuccess(string message)
    {
        Snackbar.Add(message, Severity.Success, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }

    private void DisplayError(string errorMessage)
    {
        Snackbar.Add(errorMessage, Severity.Error, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }
}
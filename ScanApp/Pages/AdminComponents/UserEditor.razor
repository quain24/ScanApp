@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Application.Admin.Commands.EditUserData
@using ValidationSummary = Microsoft.AspNetCore.Components.Forms.ValidationSummary
@using ScanApp.Application.Admin.Commands
@using ScanApp.Application.Common.Helpers.Result
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" lg="5" Class="px-1">
        <MudTable RowStyleFunc="RowStyleFunc" Breakpoint="Breakpoint.None" T="string" Items="@UserNames" @bind-SelectedItem="_selectedUserName" RowsPerPage="5"
                  Filter="new Func<string, bool>(FilterUsers)" OnRowClick="@FillUserData" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Users</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="_searchStringName" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="height: 51px;">@context</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" lg="7" Class="px-1">
        <MudCard Class="w-100 px-3 pt-2">
            <MudCardContent>
                <MudForm @bind-IsValid="@_success">
                    <MudTextField @bind-Value="_selectedUserData.Name" Variant="Variant.Filled" Label="Name" Disabled="_editDisabled" Immediate="true"></MudTextField>
                    <MudTextField @bind-Value="_selectedUserData.Email" Variant="Variant.Filled" Label="Email" Disabled="_editDisabled" Immediate="true"></MudTextField>
                    <MudTextField @bind-Value="_selectedUserData.Location" Variant="Variant.Filled" Label="Location" Disabled="_editDisabled" Immediate="true"></MudTextField>
                    <MudTextField @bind-Value="_selectedUserData.Phone" Variant="Variant.Filled" Label="Phone number" Disabled="_editDisabled" Immediate="true"></MudTextField>
                    <MudDatePicker @bind-Date="_selectedLockoutDate" Label="Lockout end date" Disabled="_editDisabled" Editable="true" />
                    <MudTimePicker @bind-Time="_selectedLockoutTime" Label="Lockout end time" Disabled="_editDisabled" Editable="true" />
                    <MudCheckBox @bind-Checked="_locked" Label="Locked" ReadOnly="_editDisabled" Class="ml-n2"></MudCheckBox>
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                @if (_editVisible)
                {
                    <MudButton OnClick="@EditHandler" Class="ml-auto" Variant="Variant.Filled" Color="Color.Warning" Disabled="string.IsNullOrWhiteSpace(_selectedUserData.Name)">Edit user</MudButton>
                }
                else
                {
                    <MudButton OnClick="@EditHandler" Class="ml-auto" Variant="Variant.Filled" Color="Color.Error" Disabled="string.IsNullOrWhiteSpace(_selectedUserData.Name)">Cancel edit</MudButton>
                }
                <MudButton OnClick="@SaveHandler" Class="ml-2 mr-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!CanEnableSave() ||  _editDisabled)">Save changes</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public List<string> UserNames { get; set; }

    [Parameter]
    public EventCallback<List<string>> UserNamesChanged { get; set; }

    private bool _success;

    private UserInfoModel _selectedUserData = new();
    private UserInfoModel _editingUserData = new();
    private bool _editDisabled = true;
    private bool _editVisible = true;
    private bool _disableSave = true;
    private bool _disableUserChange = true;
    private string _selectedUserName;
    private string _searchStringName;
    private string _lastCheckedUserName;
    private bool _locked;
    private DateTime? _selectedLockoutDate;
    private TimeSpan? _selectedLockoutTime;

    private DateTime? _editedLockoutDate;
    private TimeSpan? _editedLockoutTime;

    private async void EditHandler()
    {
        _editVisible = !_editVisible;
        _editDisabled = !_editDisabled;
        if (_editDisabled)
        {
            _selectedUserData = new UserInfoModel(_editingUserData);
            _selectedLockoutDate = _editedLockoutDate;
            _selectedLockoutTime = _editedLockoutTime;
        }
        else
        {
            _editingUserData = new UserInfoModel(_selectedUserData);
            _editedLockoutDate = _selectedLockoutDate;
            _editedLockoutTime = _selectedLockoutTime;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void SaveHandler()
    {
        var tmpData = new UserInfoModel(_selectedUserData);
        var res = await Mediator.SendScoped(new EditUserDataCommand(new EditUserDto(_editingUserData.Name)
        {
            Phone = tmpData.Phone,
            Location = tmpData.Location,
            Email = tmpData.Email,
            NewName = tmpData.Name
        }));

        if (res.Conclusion)
        {
            UserNames[UserNames.FindIndex(ind => ind.Equals(_editingUserData.Name))] = tmpData.Name;
            _editingUserData = _selectedUserData;
            await UserNamesChanged.InvokeAsync(UserNames);
            DisplaySuccess("User data has been updated.");
            return;
        }

        DisplayError(res.ErrorDescription?.ErrorMessage ?? "Unknown error");
    }

    private bool CanEnableSave()
    {
        if (_selectedUserData is null || _editingUserData is null)
            return false;
        return !_selectedUserData.EqualWithoutDate(_editingUserData);
    }

    private async void FillUserData(TableRowClickEventArgs<string> args)
    {
        if (!_editDisabled)
        {
            _editDisabled = !_editDisabled;
            _editVisible = !_editVisible;
            _selectedUserData = _editingUserData;
            _selectedLockoutDate = _editedLockoutDate;
            _selectedLockoutTime = _editedLockoutTime;
        }

        if (_selectedUserName.Equals(_lastCheckedUserName))
            return;

        var result = await Mediator.SendScoped(new GetAllUserDataQuery(_selectedUserName));

        if (!result.Conclusion)
        {
            DisplayError(result.ErrorDescription?.ErrorMessage);
            return;
        }

        _selectedUserData = result.Output;
        _selectedLockoutDate = _selectedUserData.LockoutEndDate();
        _selectedLockoutTime = _selectedUserData.LockoutEndTime();
        _lastCheckedUserName = _selectedUserName;
        await InvokeAsync(StateHasChanged);
    }

    private bool FilterUsers(string name)
    {
        if (string.IsNullOrWhiteSpace(_searchStringName))
            return true;
        return name?.Contains(_searchStringName, StringComparison.OrdinalIgnoreCase) ?? false;
    }

    private string RowStyleFunc(string rowValue, int rowNumber)
    {
        return rowValue.Equals(_selectedUserName)
            ? "background-color: lightgrey; color: white;"
            : string.Empty;
    }

    private void DisplaySuccess(string message)
    {
        Snackbar.Add(message, Severity.Success, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }

    private void DisplayError(string errorMessage)
    {
        Snackbar.Add(errorMessage, Severity.Error, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }
}
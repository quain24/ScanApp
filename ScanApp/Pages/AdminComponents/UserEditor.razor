@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Application.Admin.Commands.EditUserData
@using Severity = MudBlazor.Severity
@using System.Security.Claims
@using Microsoft.Extensions.Options;
@using Microsoft.AspNetCore.Identity;
@using ScanApp.Application.Admin.Commands.DeleteUser
@using ScanApp.Store.Features.Admin
@using ScanApp.Store.Features.Admin.DeleteUser
@using ScanApp.Store.Features.Admin.GetUserData
@using ScanApp.Store.Features.Admin.ModifyUser
@using Version = ScanApp.Domain.ValueObjects.Version

@inject IDialogService DialogService
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar
@inject IOptions<IdentityOptions> IdOptions
@inject IState<AdminState> State
@inject IDispatcher Dispatcher
@inject IActionSubscriber Subscriber
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudGrid>
    <MudItem xs="12" lg="5" Class="px-1">
        <MudTable RowStyleFunc="RowStyleFunc" Breakpoint="Breakpoint.None" T="string" Items="@UserNames" SelectedItem="@State.Value.SelectedUserName" RowsPerPage="5"
                  Filter="new Func<string, bool>(FilterUsers)" OnRowClick="@FillUserData" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Users</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="_searchStringName" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="height: 51px;">@context</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" lg="7" Class="px-1">
        <MudCard Class="w-100 px-3 pt-2">
            <MudCardContent>
                <ScanApp.Pages.AdminComponents.UserDataForm @bind-Success="_success" @bind-User="_userData" DisablePassword="true" EditingDisabled="@_editDisabled" />
                <MudButton OnClick="@OpenPasswordChangeDialog" Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(string.IsNullOrWhiteSpace(_userData.Name) || State.Value.IsLoading)">Change password</MudButton>
            </MudCardContent>
            <MudCardActions>
                @if (_editVisible)
                {
                    <MudButton OnClick="@EditHandler" Class="ml-auto" Variant="Variant.Filled" Color="Color.Warning" Disabled="@(string.IsNullOrWhiteSpace(_userData.Name) || State.Value.IsLoading)">Edit user</MudButton>
                    <MudButton OnClick="@OpenAddUserDialog" Class="ml-2" Variant="Variant.Filled" Color="Color.Success" Disabled="@(!_editDisabled || State.Value.IsLoading)">Add user</MudButton>
                    <MudButton OnClick="@DeleteHandler" Class="ml-2" Variant="Variant.Filled" Color="Color.Error" Disabled="!CanEnableDelete()">Remove user</MudButton>
                }
                else
                {
                    <MudButton OnClick="@EditHandler" Class="ml-auto" Variant="Variant.Filled" Color="Color.Error" Disabled="string.IsNullOrWhiteSpace(_userData.Name)">Cancel edit</MudButton>
                }
                <MudButton OnClick="@SaveHandler" Class="ml-2 mr-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="!CanEnableSave()">Save changes</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public List<string> UserNames { get; set; }
    
    [Parameter]
    public string SelectedRowStyle { get; set; }

    private bool _success = true;

    private UserInfoModel _userData = new();
    private UserInfoModel _originalUserData = new();
    private bool _editDisabled = true;
    private bool _editVisible = true;
    private bool _deleteDisabled = true;
    private string _selectedUserName;
    private string _searchStringName;
    private string _lastCheckedUserName;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Subscriber.SubscribeToAction<GetUserDataSuccessAction>(this, action => _userData = action.User);
        Subscriber.SubscribeToAction<DeleteUserFailureAction>(this, action => DisplayError($"{action.Error.ErrorCode} - {action.Error.ErrorText}"));
        Subscriber.SubscribeToAction<DeleteUserSuccessAction>(this, action =>
        {
            DisplaySuccess($"User {action.DeletedUserName} deleted");
            _userData = new();
        });

        Subscriber.SubscribeToAction<ModifyUserDataSuccessAction>(this, action =>
        {
            _editDisabled = true;
            _editVisible = true;
            _originalUserData = new UserInfoModel()
            {
                Email = action.Data.Email,
                Location = action.Data.Location,
                LockoutEnd = _userData.LockoutEnd,
                Name = action.Data.NewName,
                Version = action.Data.Version,
                Phone = action.Data.Phone
            };
            DisplaySuccess("Data modified!");
        });
        Subscriber.SubscribeToAction<ModifyUserDataFailureAction>(this, action => DisplayError($"{action.Error.ErrorCode} - {action.Error.ErrorText}"));
    }

    private void OpenAddUserDialog()
    {
        var dialog = DialogService.Show<AddUserDialog>("Add new user", new DialogOptions()
        {
            FullWidth = true,
            DisableBackdropClick = true
        });
    }

    private void OpenPasswordChangeDialog()
    {
        DialogService.Show<ChangePasswordDialog>($"Password change - {State.Value.SelectedUserName}",
            new DialogOptions()
            {
                FullWidth = true,
                DisableBackdropClick = true
            });
    }

    private bool CanEnableSave()
    {
        if (_userData is null || _originalUserData is null)
            return false;
        return !_userData.EqualWithoutDate(_originalUserData) && _success && !_editDisabled && !State.Value.IsLoading;
    }

    private bool CanEnableDelete()
    {
        if (string.IsNullOrEmpty(State.Value.SelectedUserName) || _userData is null)
            return false;
        return _editDisabled;
    }

    private async Task DeleteHandler()
    {
        var principal = (await AuthenticationStateTask).User;
        var currentUserName = principal.FindFirstValue(IdOptions.Value.ClaimsIdentity.UserNameClaimType);

        if (string.Equals(State.Value.SelectedUserName, currentUserName))
        {
            Snackbar.Add("Cannot delete your own user account", Severity.Warning, options => options.SnackbarVariant = Variant.Filled);
            return;
        }

        var dialog = DialogService.Show<YesNoDialog>("Confirm deletion", new DialogParameters()
        {
            ["Content"] = $"Are you sure you want to delete user {State.Value.SelectedUserName}?"
        },
        new DialogOptions()
        {
            FullWidth = true,
            DisableBackdropClick = true
        });

        if ((await dialog.Result).Cancelled)
            return;

        Dispatcher.Dispatch(new DeleteUserAction());
    }

    private void EditHandler()
    {
        _editVisible = !_editVisible;
        _editDisabled = !_editDisabled;
        if (_editDisabled)
        {
            _userData = new UserInfoModel(_originalUserData);
        }
        else
        {
            _originalUserData = new UserInfoModel(_userData);
        }
        InvokeAsync(StateHasChanged);
    }

    private void SaveHandler()
    {
        Dispatcher.Dispatch(new ModifyUserDataAction(new EditUserDto(State.Value.SelectedUserName)
        {
            Phone = _userData.Phone,
            Location = _userData.Location,
            Email = _userData.Email,
            NewName = _userData.Name,
            Version = State.Value.SelectedUserVersion
        }));
    }

    private void FillUserData(TableRowClickEventArgs<string> args)
    {
        if (!_editDisabled)
        {
            _editDisabled = !_editDisabled;
            _editVisible = !_editVisible;
            _userData = _originalUserData;
        }

        if (State.Value.SelectedUserName.Equals(_lastCheckedUserName))
            return;

        Dispatcher.Dispatch(new GetUserDataAction(args.Item));
        StateHasChanged();
    }

    void FillData(UserInfoModel user)
    {
        _userData = user;
    }

    private bool FilterUsers(string name)
    {
        if (string.IsNullOrWhiteSpace(_searchStringName))
            return true;
        return name?.Contains(_searchStringName, StringComparison.OrdinalIgnoreCase) ?? false;
    }

    private string RowStyleFunc(string rowValue, int rowNumber)
    {
        return rowValue.Equals(State.Value.SelectedUserName)
            ? SelectedRowStyle ?? string.Empty
            : string.Empty;
    }

    private void DisplaySuccess(string message)
    {
        Snackbar.Add(message, Severity.Success, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }

    private void DisplayError(string errorMessage)
    {
        Snackbar.Add(errorMessage, Severity.Error, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }

    protected override void Dispose(bool disposing)
    {
        Subscriber.UnsubscribeFromAllActions(this);
        base.Dispose(disposing);
    }

}
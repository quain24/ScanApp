@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Common
@using ScanApp.Common.Validators
@using FluentValidation

<MudForm @ref="@_form" IsValidChanged="@OnValidationChanged" IsValid="@Success">
    <MudTextField @bind-Value="User.Name" TextChanged="OnUserChanged" Validation="@_nameValidator.Validation" Variant="Variant.Filled" Label="Name" Disabled="EditingDisabled" Immediate="true"></MudTextField>
    <MudTextField @bind-Value="User.Email" TextChanged="OnUserChanged" Validation="@_emailValidator.Validation" Variant="Variant.Filled" Label="Email" Disabled="EditingDisabled" Immediate="true"></MudTextField>
    <MudTextField @bind-Value="User.Location" TextChanged="OnUserChanged" Validation="@_locationValidator.Validation" Variant="Variant.Filled" Label="Location" Disabled="EditingDisabled" Immediate="true"></MudTextField>
    <MudTextField @bind-Value="User.Phone" TextChanged="OnUserChanged" Validation="@_phoneValidator.Validation" Variant="Variant.Filled" Label="Phone number" Disabled="EditingDisabled" Immediate="true"></MudTextField>
</MudForm>

@code {

    protected override void OnParametersSet()
    {
        if (EditingDisabled is true)
            _form?.ResetValidation();
        if(!User.EqualWithDate(_localUserCopy))
            _localUserCopy = new UserInfoModel(User);
    }
    
    [Parameter]
    public bool Success { get; set; }
    [Parameter]
    public EventCallback<bool> SuccessChanged { get; set; }

    [Parameter]
    public UserInfoModel User { get; set; }
    [Parameter]
    public EventCallback<UserInfoModel> UserChanged { get; set; }

    private UserInfoModel _localUserCopy;

    [Parameter]
    public bool EditingDisabled { get; set; }

    private MudForm _form;

    private readonly FluentValidationWrapper<string> _nameValidator = new(x => x
        .SetValidator(new IdentityNamingValidator())
        .WithMessage("Name contain illegal chars or has length less than 3 or more than 60"));

    private readonly FluentValidationWrapper<string> _emailValidator = new(x => x
        .SetValidator(new EmailValidator())
        .WithMessage("This is not a valid email"));

    private readonly FluentValidationWrapper<string> _locationValidator = new(x => x
        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator())
        .WithMessage("Location contains illegal chars"));

    private readonly FluentValidationWrapper<string> _phoneValidator = new(x => x
        .SetValidator(new PhoneNumberValidator())
        .WithMessage("Not a valid phone number"));

    private Task OnValidationChanged(bool isValid)
    {
        return SuccessChanged.InvokeAsync(isValid);
    }

    private async Task OnUserChanged()
    {
        if (_localUserCopy.EqualWithDate(User))
            return;

        await UserChanged.InvokeAsync(User);
    }

}
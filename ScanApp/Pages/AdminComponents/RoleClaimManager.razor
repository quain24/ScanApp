@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Common.Helpers.Result
@using ScanApp.Application.Admin.Queries.GetAllRoleClaims
@using ScanApp.Application.Admin.Commands.AddClaimToRole
@using ScanApp.Application.Admin.Commands.RemoveClaimFromRole
@using ScanApp.Application.Admin.Queries.GetAllClaimsFromRole
@using ScanApp.Application.Admin
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" lg="6" Class="px-1">
        <MudTable Breakpoint="Breakpoint.None" T="string" Items="@RoleNames" @bind-SelectedItem="_selectedRole" RowsPerPage="5"
                  Filter="new Func<string, bool>(FilterRoles)" OnRowClick="@FillSelectedRoleClaimsData" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Roles</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="_searchStringRole" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="height: 51px;">@context</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" lg="6" Class="px-1">
        <MudTable Breakpoint="Breakpoint.None" Items="@_roleClaims" @bind-SelectedItem="_selectedClaim" RowsPerPage="5"
                  Filter="new Func<(ClaimModel Claim, bool IsInClaim), bool>(FilterClaims)" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Claims</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="_searchStringClaim" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Claim Type</MudTh>
                <MudTh>Claim Value</MudTh>
                <MudTh>Active</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Item1.Type</MudTd>
                <MudTd>@context.Item1.Value</MudTd>
                <MudTd><MudSwitch T="bool" CheckedChanged="@(async arg => await Switch(arg))" Checked="@context.IsInClaim" Color="Color.Primary"></MudSwitch></MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" Class="px-1">
        <MudButton Color="Color.Warning" Variant="Variant.Filled">Delete selected role</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled">Delete selected claim</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Filled">Add new role</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Filled">Add new claim</MudButton>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public List<string> RoleNames { get; set; }

    private string _selectedRole;
    private (ClaimModel Claim, bool IsInClaim) _selectedClaim;
    private List<(ClaimModel, bool IsInClaim)> _roleClaims = new();
    private List<ClaimModel> _claims = new();
    private string _lastCheckedRole;
    private string _searchStringRole;
    private string _searchStringClaim;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RetrieveAllClaims();
    }

    private async Task RetrieveAllClaims()
    {
        var roleResult = await Mediator.SendScoped(new GetAllRoleClaimsQuery());

        if (roleResult.Conclusion is false)
        {
            DisplayError(roleResult.ErrorDescription?.ErrorMessage);
            return;
        }

        _claims = roleResult.Output;
    }

    private async Task Switch(bool arg)
    {
        Result result;
        string message;

        if (_selectedClaim.IsInClaim)
        {
            result = await Mediator.SendScoped(new RemoveClaimFromRoleCommand(_selectedClaim.Claim, _selectedRole));
            message = $"Claim {_selectedClaim.Claim.Type} with value of {_selectedClaim.Claim.Value} removed from {_selectedRole}";
        }
        else
        {
            result = await Mediator.SendScoped(new AddClaimToRoleCommand(_selectedRole, _selectedClaim.Claim));
            message = $"Claim {_selectedClaim.Claim.Type} with value of {_selectedClaim.Claim.Value} added to {_selectedRole}";
        }

        if (result.Conclusion is false)
        {
            DisplayError(result.ErrorDescription?.ErrorMessage);
            return;
        }

        var index = _roleClaims.FindIndex(c => c.Equals(_selectedClaim));
        _roleClaims[index] = (_selectedClaim.Claim, !_selectedClaim.IsInClaim);

        await InvokeAsync(StateHasChanged);
        DisplaySuccess(message);
    }

    private async void FillSelectedRoleClaimsData(TableRowClickEventArgs<string> args)
    {
        if (args.Item.Equals(_lastCheckedRole))
            return;

        var res = await Mediator.SendScoped(new GetAllClaimsFromRoleQuery(args.Item));

        if (res.Conclusion is false)
        {
            DisplayError(res.ErrorDescription?.ErrorMessage);
            return;
        }

        _lastCheckedRole = args.Item;
        _roleClaims = _claims.Select(r =>
        {
            var IsActive = res.Output.Contains(r);
            return (r, IsActive);
        }).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private void DisplayError(string errorMessage)
    {
        Snackbar.Add(errorMessage, Severity.Error, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }

    private void DisplaySuccess(string message)
    {
        Snackbar.Add(message, Severity.Success, options =>
        {
            options.SnackbarVariant = Variant.Filled;
        });
    }

    private bool FilterClaims((ClaimModel Claim, bool IsInClaim) data)
    {
        if (string.IsNullOrEmpty(_searchStringClaim))
            return true;
        return (data.Claim.Type?.Contains(_searchStringClaim, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (data.Claim.Value?.Contains(_searchStringClaim, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private bool FilterRoles(string roleName)
    {
        if (string.IsNullOrWhiteSpace(_searchStringRole))
            return true;
        return roleName?.Contains(_searchStringRole, StringComparison.OrdinalIgnoreCase) ?? false;
    }
}
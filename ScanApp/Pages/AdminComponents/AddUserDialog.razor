@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Application.Admin.Commands.AddUser
@using ScanApp.Store.Features
@using ScanApp.Store.Features.Admin
@using ScanApp.Store.Features.Admin.AddNewUser
@inject ISnackbar Snackbar
@inject IDispatcher Dispatcher
@inject IActionSubscriber ActionSubscriber
@inject IState<AdminState> State

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudDialog>
    <DialogContent>
        <UserDataForm @ref="_form" @bind-Success="_success" @bind-User="User" @bind-Password="_password" EditingDisabled="false" />
    </DialogContent>
    <DialogActions>
        <MudButton Class="ml-auto" Disabled="@State.Value.IsLoading" Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Class="mr-auto" Disabled="@(State.Value.IsLoading || !_success)" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddUserClicked">Add user</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private UserDataForm _form;
    private string _password;

    private bool _success = true;
    UserInfoModel User { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ActionSubscriber.SubscribeToAction<AddNewUserSuccessAction>(this, action => CloseOnSuccess(action.NewUserName));
        ActionSubscriber.SubscribeToAction<AddNewUserFailureAction>(this, action => DisplayError(action.Error));
    }

    private void AddUserClicked()
    {
        _form.Validate();
        if (_success is false)
            return;

        var userDto = new AddUserDto()
        {
            Name = User.Name,
            Email = User.Email,
            Location = User.Location,
            Phone = User.Phone,
            Password = _password
        };

        Dispatcher.Dispatch(new AddNewUserAction(userDto));
    }

    void CloseOnSuccess(string newUserName)
    {
        Snackbar.Add($"User {newUserName} has been added to database", Severity.Success, options => options.SnackbarVariant = Variant.Filled);
        InvokeAsync(() => MudDialog.Close(DialogResult.Ok(true)));
    }

    void DisplayError(Error error)
    {
        Snackbar.Add($"{error.ErrorCode} - {error.ErrorText}", Severity.Error, options => options.SnackbarVariant = Variant.Filled);
    }

    void Cancel() => MudDialog.Cancel();

    protected override void Dispose(bool disposing)
    {
        ActionSubscriber.UnsubscribeFromAllActions(this);
        base.Dispose(disposing);
    }

}
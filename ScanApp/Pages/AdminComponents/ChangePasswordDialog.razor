@using InputType = MudBlazor.InputType
@using ScanApp.Application.Common.Validators
@using ScanApp.Common.Extensions
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Commands.ChangeUserPassword
@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Domain.ValueObjects
@inject PasswordValidator PasswordValidator
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_success">
            <MudTextFieldString @bind-Value="Password" Variant="Variant.Filled" Validation="@_validator" InputType="InputType.Password" Label="New password" Immediate="true"></MudTextFieldString>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="!_success" OnClick="Submit">Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UserInfoModel User { get; set; }

    private MudForm _form;
    private bool _success = true;
    private Func<string, Task<IEnumerable<string>>> _validator;
    string Password { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        _validator = PasswordValidator.ToAsyncMudFormFieldValidator();
    }

    async Task Submit()
    {
        _form.Validate();
        if (!_success)
            return;

        var result = await Mediator.SendScoped(new ChangeUserPasswordCommand(User.Name, Password, User.ConcurrencyStamp));

        if (result.Conclusion)
        {
            MudDialog.Close(DialogResult.Ok(result.Output));
            return;
        }
        Snackbar.Add(result.ErrorDescription?.ErrorMessage ?? "Unknown", Severity.Error, options => options.SnackbarVariant = Variant.Filled);
        _form.Reset();
    }

    void Cancel() => MudDialog.Cancel();
}
@using InputType = MudBlazor.InputType
@using ScanApp.Application.Common.Validators
@using ScanApp.Common.Extensions
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Commands.ChangeUserPassword
@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Store.Features
@using ScanApp.Store.Features.Admin
@using ScanApp.Store.Features.Admin.ChangeUserPassword
@inject PasswordValidator PasswordValidator
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar
@inject IDispatcher Dispatcher
@inject IActionSubscriber Subscriber
@inject IState<AdminState> State

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_success">
            <MudTextFieldString @bind-Value="Password" Variant="Variant.Filled" Validation="@_validator" InputType="InputType.Password" Label="New password" Immediate="true"></MudTextFieldString>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!_success || State.Value.IsLoading)" OnClick="ConfirmClicked">Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudForm _form;
    private bool _success = true;
    private Func<string, Task<IEnumerable<string>>> _validator;
    string Password { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _validator = PasswordValidator.ToAsyncMudFormFieldValidator();
        Subscriber.SubscribeToAction<ChangeUserPasswordSuccessAction>(this, async _ => await OnPasswordChanged());
        Subscriber.SubscribeToAction<ChangeUserPasswordFailureAction>(this, action => OnPasswordChangeError(action.Error));
    }

    void ConfirmClicked()
    {
        _form.Validate();
        if (!_success)
            return;

        Dispatcher.Dispatch(new ChangeUserPasswordAction(Password));
    }

    async Task OnPasswordChanged()
    {
        Snackbar.Add("Password changed!", Severity.Success, options => options.SnackbarVariant = Variant.Filled);
        await InvokeAsync(() => MudDialog.Close(DialogResult.Ok(true)));
    }

    void OnPasswordChangeError(Error error)
    {
        Snackbar.Add($"{error.ErrorCode} - {error.ErrorText}", Severity.Error, options => options.SnackbarVariant = Variant.Filled);
    }

    void Cancel() => MudDialog.Cancel();

    protected override void Dispose(bool disposing)
    {
        Subscriber.UnsubscribeFromAllActions(this);
        base.Dispose(disposing);
    }

}
@page "/fetchdata"
@inherits OwningComponentBase

@using ScanApp.Data
@using ScanApp.Common.Validators
@using ScanApp.Common
@using FluentValidation
@inject WeatherForecastService ForecastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer Fixed="true" Class="mt-auto">
    <MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
    <MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

    @if (forecasts == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0" Breakpoint="Breakpoint.None" Dense="true">
            <ColGroup>
                <col style="width: 50px" />
                <col style="width: 50px" />
                <col style="width: 50px" />
                <col style="width: 50px" />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.Date)">Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.TemperatureC)">Temp. (C)</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x => x.TemperatureF)">Temp. (F)</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.Summary)">Summary</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@context.Date</MudTd>
                <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
                <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
                <MudTd DataLabel="Summary">@context.Summary</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {3, 5, 10}" />
            </PagerContent>
        </MudTable>

        
        <MudTextField @bind-Value="v" Validation="@valll"></MudTextField>
    }
</MudContainer>

@code {
    private WeatherForecast[] forecasts;
    //ColumnConfig<WeatherForecast> _conf = new ColumnConfig<WeatherForecast>(w => w.Summary, "weather", new FluentValidationWrapper<string>(x => x.Length(10)));
    //ColumnConfig<WeatherForecast> _conf = new ColumnConfig<WeatherForecast>(w => w.Summary, "weather", new IdentityNamingValidator<string, string>(), "error");
    //ColumnConfigAlt<WeatherForecast> _conf = new ColumnConfigAlt<WeatherForecast>(w => w.Summary, null, new FluentValidationWrapper<int>(x => x.Equal(10)));
    Func<int, IEnumerable<string>> valll = new FluentValidationWrapper<int>(x => x.GreaterThan(10)).Validation;


    int v = 0;

    protected override async Task OnInitializedAsync()
    {
        new IdentityNamingValidator<string, string>();
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

    }

}


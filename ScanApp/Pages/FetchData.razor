@page "/fetchdata"
@inherits OwningComponentBase

@using ScanApp.Data
@using Microsoft.AspNetCore.Server.HttpSys
@using Microsoft.AspNetCore.Identity;
@using ScanApp.Application.Common.Entities
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Infrastructure.Identity
@inject WeatherForecastService ForecastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    protected override async Task OnParametersSetAsync()
    {
        var appdb = (IApplicationDbContext)ScopedServices.GetService(typeof(IApplicationDbContext));
        var mana = (UserManager<ApplicationUser>)ScopedServices.GetService(typeof(UserManager<ApplicationUser>));
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        //var ty = appdb.Users.Single(u => u.UserName == user.Identity.Name);
        //ty.PhoneNumber = Guid.NewGuid().ToString();
        //int uu = 0;
        //while (uu == 0)
        //{
        //    try
        //    {
        //        uu = await appdb.SaveChangesAsync();
        //    }
        //    catch { }
        //}

        var currentUser = await mana.FindByNameAsync(user.Identity.Name);
        if (currentUser is not null)
        {
            await mana.UpdateSecurityStampAsync(currentUser);
        }
        await base.OnParametersSetAsync();
        mana.Dispose();
    }

}
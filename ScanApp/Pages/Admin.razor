@attribute [Authorize(Roles = "Admin")]
@page "/admin"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using ScanApp.Infrastructure.Persistence
@using System.Net
@using MediatR
@using Microsoft.Extensions.DependencyInjection
@using ScanApp.Application.Admin.Commands
@using ScanApp.Application.Admin.Queries
@using ScanApp.Application.Common.Interfaces
@using System.Linq.Dynamic.Core
@using System.Reflection
@using System.Threading
@using Microsoft.AspNetCore.Identity.UI.V4.Pages.Internal.Account.Manage
@using Microsoft.VisualBasic
@using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Razor
@using ScanApp.Application.Admin.Commands.AddClaimToRole
@using ScanApp.Application.Admin.Commands.AddNewUserRole
@using ScanApp.Application.Admin.Commands.AddUser
@using ScanApp.Application.Admin.Commands.EditUserData
@using ScanApp.Application.Admin.Queries.GetAllUserRoles
@using ScanApp.Application.Admin.Queries.GetAllUsers
@using ScanApp.Application.Common.Entities
@using ScanApp.Infrastructure.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceScopeFactory ScopeFactory
@inject IScopedMediator Mediator
@inject NotificationService NotificationService
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

@inherits OwningComponentBase

<h1>Admin page</h1>
<div class="container-fluid m-0">
    <div class="row">
        <div class="col-sm-6 m-0 p-1">
            <RadzenGrid Responsive="false" Data="@_users" Count="@_count" LoadData="@LoadData" TItem="ApplicationUser"
                        AllowFiltering="true" RowSelect="@(args => _selectedUser = args)"
                        AllowColumnResize="true" AllowPaging="true" PageSize="4" @ref="_usersGrid">
                <Columns>
                    <RadzenGridColumn TItem="ApplicationUser" Property="UserName" Title="Name"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ApplicationUser" Property="Location" Title="Location"></RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
        <div class="col-sm-6 m-0 p-1">
            <RadzenGrid Responsive="false" TItem="IdentityRole" @ref="_rolesGrid" Count="@_roleCount" Data="@_roles" RowCreate="@OnCreateRow"
                        RowSelect="@( args => _selectedRole = args)"
                        LoadData="@(async args => await LoadRoles(args))" RowUpdate="@OnUpdate" AllowPaging="true" PageSize="4" EditMode="DataGridEditMode.Single">
                <Columns>
                    <RadzenGridColumn TItem="IdentityRole" Property="Name" Title="Name">
                        <EditTemplate Context="identityRole">
                            <RadzenTextBox @bind-value="identityRole.Name" Placeholder="@identityRole.Name"></RadzenTextBox>
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="IdentityRole" Property="ConcurrencyStamp" Title="CStamp">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="IdentityRole" Context="SampleEditContext" Bubble="false" Width="150px">
                        <Template Context="identityRole">
                            <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(identityRole))">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="identityRole">
                            <RadzenButton Icon="save" Disabled="string.IsNullOrWhiteSpace(identityRole.Name)" Size="ButtonSize.Medium" Click="@((args) => SaveRow(identityRole))">
                            </RadzenButton>
                            <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(identityRole))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
    <RadzenTextBox Change="@(args => _claimName = args)" Placeholder="Claim name"></RadzenTextBox>
    <RadzenTextBox Change="@(args => _claimValue = args)" Placeholder="Claim value"></RadzenTextBox>
    <RadzenTextBox Change="@(args => newUser.Name = args)" Placeholder="New user name"></RadzenTextBox>
    <RadzenTextBox Change="@(args => newUser.Email = args)" Placeholder="Email"></RadzenTextBox>
    <RadzenTextBox Change="@(args => newUser.Location = args)" Placeholder="Location"></RadzenTextBox>
    <RadzenTextBox Change="@(args => newUser.Password = args)"></RadzenTextBox>
    <RadzenButton Icon="add_circle_outline" Disabled="@(_selectedRole is null)" Click="@(async args => await AddNewClaimToSelectedRole())" style="margin-bottom: 10px" Text="Add new claim to role" />
    <RadzenButton Icon="add_circle_outline" Disabled="@(_rolesGrid?.IsRowInEditMode(_selectedRole ?? new IdentityRole()) ?? false)" Click="@InsertRow" style="margin-bottom: 10px" Text="Add new role" />
    <RadzenButton Icon="add_circle_outline" Disabled="@(string.IsNullOrWhiteSpace(newUser.Name) || string.IsNullOrWhiteSpace(newUser.Password) || string.IsNullOrWhiteSpace(newUser.Email))" Click="@(async args => await AddNewUser())" style="margin-bottom: 10px" Text="Add new User" />

    <div>
        <RadzenTextBox Value="@(_selectedUser?.UserName)" @ref="nname" Placeholder="New name"></RadzenTextBox>
        <RadzenTextBox Value="@(_selectedUser?.PhoneNumber)" @ref="nphone" Placeholder="New phone"></RadzenTextBox>
        <RadzenTextBox Value="@(_selectedUser?.Email)" @ref="nemail" Placeholder="New email"></RadzenTextBox>
        <RadzenTextBox Value="@(_selectedUser?.Location)" @ref="nlocation" Placeholder="New Location"></RadzenTextBox>
        <RadzenButton Icon="add_circle_outline" Disabled="@(_selectedUser is null)" Click="@(async args => await EditUserData())" style="margin-bottom: 10px" Text="Modify selected user" />
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private IApplicationDbContext _applicationDbContext { get; set; }
    private IApplicationDbContext _roleContext { get; set; }

    int _count;
    int _roleCount;
    IEnumerable<ApplicationUser> _users;
    IList<IdentityRole> _roles;
    ApplicationUser _selectedUser;
    EditUserDto _editUser;
    RadzenGrid<IdentityRole> _rolesGrid;
    RadzenGrid<ApplicationUser> _usersGrid;
    string _claimName;
    string _claimValue;
    IdentityRole _selectedRole;
    RadzenTextBox nname;
    RadzenTextBox nphone;
    RadzenTextBox nemail;
    RadzenTextBox nlocation;

    //protected override bool ShouldRender() => MayRender;

    AddUserDto newUser = new AddUserDto();

    async Task EditUserData()
    {
        var edit = new EditUserDto(_selectedUser.UserName)
        {
            Email = nemail.Value,
            Location = nlocation.Value,
            NewName = string.IsNullOrWhiteSpace(nname.Value) ? null : nname.Value,
            Phone = nphone.Value
        };

        var result = await Mediator.SendScoped(new EditUserDataCommand(edit));
        var notification = new NotificationMessage()
        {
            Detail = result.Conclusion ? $"All OK, {result.Output ?? "No additional output"}" : $"{result.ErrorDescription?.ErrorMessage ?? "Unknown error"}, {result.Output ?? "No additional output"}",
            Severity = result.Conclusion ? NotificationSeverity.Success : NotificationSeverity.Error
        };
        ShowNotification(notification);
        await _usersGrid.Reload();
    }

    async Task AddNewUser()
    {
        var result = await Mediator.SendScoped(new AddUserCommand(newUser));
        var notification = new NotificationMessage()
        {
            Detail = result.Conclusion ? $"All OK, {result.Output ?? "No additional output"}" : $"{result.ErrorDescription?.ErrorMessage ?? "Unknown error"}, {result.Output ?? "No additional output"}",
            Severity = result.Conclusion ? NotificationSeverity.Success : NotificationSeverity.Error
        };
        ShowNotification(notification);
        await _usersGrid.Reload();
    }

    async Task AddNewClaimToSelectedRole()
    {
        if (_selectedRole is null)
            return;
        var result = await Mediator.SendScoped(new AddClaimToRoleCommand(_selectedRole.Name, _claimName, _claimValue));
        var notification = new NotificationMessage()
        {
            Detail = result.Conclusion ? $"All OK, {result.Output ?? "No additional output"}" : $"{result.ErrorDescription?.ErrorMessage ?? "Unknown error"}, {result.Output ?? "No additional output"}",
            Severity = result.Conclusion ? NotificationSeverity.Success : NotificationSeverity.Error
        };
        ShowNotification(notification);
    }

    protected override void OnInitialized()
    {

        _applicationDbContext = ContextFactory.CreateDbContext();
        _roleContext = ContextFactory.CreateDbContext();

        base.OnInitializedAsync();

    }

    async Task InsertRow()
    {
        var role = new IdentityRole();
        _roles.Add(role);
        await _rolesGrid.SelectRow(role);
        await _rolesGrid.EditRow(role);
    }

    void EditRow(IdentityRole order)
    {
        _rolesGrid.EditRow(order);
    }

    void SaveRow(IdentityRole order)
    {
        _rolesGrid.UpdateRow(order);
    }

    async Task OnCreateRow(IdentityRole role)
    {
        await Mediator.SendScoped(new AddNewUserRoleCommand(role.Name));
    }

    async Task CancelEdit(IdentityRole order)
    {
        _rolesGrid.CancelEditRow(order);

        var orderEntry = _roleContext.Entry(order);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
        await InvokeAsync(StateHasChanged);
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    async Task LoadData(LoadDataArgs args)
    {
        var query = await Mediator.SendScoped(new GetAllUsersQuery());
        var result = query.Output;
        if (!string.IsNullOrEmpty(args.Filter))
            result = result.AsQueryable().Where(args.Filter).ToList();

        _users = result.Skip(args.Skip.Value).Take(args.Top.Value).OrderBy(a => a.UserName);
        _count = query.Output.Count;

        await InvokeAsync(StateHasChanged);
    }

    async Task LoadRoles(LoadDataArgs args)
    {
        var result = await Mediator.SendScoped(new GetAllUserRolesQuery());

        if (result.Conclusion)
        {
            _roles = result.Output.Skip(args.Skip.Value).Take(args.Top.Value).OrderBy(r => r.Name).ToList();
            _roleCount = result.Output.Count;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            ShowNotification(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Could not load roles",
                Detail = $"Something happened, roles could not be loaded:\n{result.ErrorDescription.ErrorMessage}"
            });
        }
    }

    private async Task OnUpdate(IdentityRole obj)
    {
        try
        {
            obj.NormalizedName = obj.Name.ToUpperInvariant();

            var r = _roleContext.Roles.FirstOrDefault(r => r.Id == obj.Id);
            if (r is not null)
            {
                r.Name = obj.Name;
                r.NormalizedName = obj.NormalizedName;
                var update = await _roleContext.SaveChangesAsync();
            }
            else
            {
                await Mediator.SendScoped(new AddNewUserRoleCommand(obj.Name));
            }
            await _rolesGrid.Reload();

        }
        catch (DbUpdateConcurrencyException dbex)
        {
            Console.WriteLine("ContextFactory exc");
            var conflictingEntry = (IdentityRole)dbex.Entries.First().Entity;

            var originalValues = (IdentityRole)dbex.Entries.First().GetDatabaseValues().ToObject();

            Console.WriteLine("Original entry value -- New entry value");
            Console.WriteLine($"{originalValues.Id} -- {conflictingEntry.Id}");
            Console.WriteLine($"{originalValues.ConcurrencyStamp} -- {conflictingEntry.ConcurrencyStamp}");
            Console.WriteLine($"{originalValues.Name} -- {conflictingEntry.Name}");
            Console.WriteLine($"{originalValues.NormalizedName} -- {conflictingEntry.NormalizedName}");

            var data = dbex.Entries.Single();
            data.OriginalValues.SetValues(data.GetDatabaseValues());

            var u = await _roleContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {

        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _roleContext.Dispose();
        _applicationDbContext.Dispose();
    }
}
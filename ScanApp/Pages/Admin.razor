@attribute [Authorize(Roles = "Admin")]
@page "/admin"
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Queries.GetAllUsers
@using ScanApp.Application.Admin.Queries.GetAllUserRoles
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar

@inherits OwningComponentBase
<MudContainer Style="background-color: blanchedalmond; padding: 5px;" MaxWidth="MaxWidth.False">

    <MudText Typo="Typo.h3" GutterBottom="true">Admin page</MudText>
    <MudDivider DividerType="DividerType.Middle" Style="margin-bottom: 15px"></MudDivider>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2" KeepPanelsAlive="true">
        <MudTabPanel Text="User Management">
            <ScanApp.Pages.AdminComponents.UserEditor UserNames="@_userNames" />
        </MudTabPanel>
        <MudTabPanel Text="Role Management">
            <ScanApp.Pages.AdminComponents.UserRolesManager RoleNames="@_roleNames" UserNames="_userNames" />
        </MudTabPanel>
        <MudTabPanel Text="Claim management">
            <ScanApp.Pages.AdminComponents.RoleClaimManager RoleNames="@_roleNames" />
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<string> _userNames = new();
    private List<string> _roleNames = new();

    private bool _shouldRender = true;
    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RetrieveAllUserNames();
        await RetrieveAllRoleNames();
    }

    private async Task RetrieveAllUserNames()
    {
        var usersResult = await Mediator.SendScoped(new GetAllUsersQuery());
        if (usersResult.Conclusion is false)
        {
            DisplayError(usersResult.ErrorDescription?.ErrorMessage);
            return;
        }

        _userNames = usersResult.Output.Select(u => u.UserName).ToList();
    }

    private async Task RetrieveAllRoleNames()
    {
        var roleResult = await Mediator.SendScoped(new GetAllUserRolesQuery());

        if (roleResult.Conclusion is false)
        {
            DisplayError(roleResult.ErrorDescription?.ErrorMessage);
            return;
        }

        _roleNames = roleResult.Output;
    }

    private void DisplayError(string errorMessage)
    {
        Snackbar.Add(errorMessage, Severity.Error, options =>
        {
            options.RequireInteraction = true;
            options.SnackbarVariant = Variant.Filled;
        });
    }
}
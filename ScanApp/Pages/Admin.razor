@attribute [Authorize(Roles = "Admin")]
@page "/admin"
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Queries.GetAllUserRoles
@using Fluxor;
@using Microsoft.AspNetCore.Components;
@using ScanApp.Store.Features.Admin.ReadUserNames
@using Store.Features.Admin;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar

@inject IState<AdminState> State
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudContainer Style="background-color: blanchedalmond; padding: 5px;" MaxWidth="MaxWidth.False">

    <MudText Typo="Typo.h3" GutterBottom="true">Admin page</MudText>
    <MudDivider DividerType="DividerType.Middle" Style="margin-bottom: 15px"></MudDivider>
    <MudSwipeArea OnSwipe="@OnSwipe">
        <MudTabs @ref="_tabPanel" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2" KeepPanelsAlive="true">
            <MudTabPanel Text="User Management">
                <ScanApp.Pages.AdminComponents.UserEditor UserNames="@State.Value.UserNames.ToList()" SelectedRowStyle="@_selectedRowStyle" />
            </MudTabPanel>
            <MudTabPanel Text="Role Management">
                <ScanApp.Pages.AdminComponents.UserRolesManager RoleNames="@_roleNames" UserNames="State.Value.UserNames.ToList()" SelectedRowStyle="@_selectedRowStyle" />
            </MudTabPanel>
            <MudTabPanel Text="Claim management">
                <ScanApp.Pages.AdminComponents.RoleClaimManager RoleNames="@_roleNames" SelectedRowStyle="@_selectedRowStyle" />
            </MudTabPanel>
        </MudTabs>
    </MudSwipeArea>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private MudTabs _tabPanel;

    private List<string> _roleNames = new();

    private string _selectedRowStyle = "background-color: lightgrey";
    private bool _shouldRender = true;
    protected override bool ShouldRender() => _shouldRender;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (State.Value.UserNames.IsEmpty)
            Dispatcher.Dispatch(new ReadUserNamesAction());
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RetrieveAllRoleNames();
    }

    private void OnSwipe(SwipeDirection direction)
    {
        switch (direction)
        {
            case SwipeDirection.RightToLeft when _tabPanel.ActivePanelIndex < _tabPanel.Panels.Count - 1:
                _tabPanel.ActivatePanel(_tabPanel.ActivePanelIndex + 1);
                break;
            case SwipeDirection.LeftToRight when _tabPanel.ActivePanelIndex > 0:
                _tabPanel.ActivatePanel(_tabPanel.ActivePanelIndex - 1);
                break;
        }
        StateHasChanged();
    }

    private async Task RetrieveAllRoleNames()
    {
        var roleResult = await Mediator.SendScoped(new GetAllUserRolesQuery());

        if (roleResult.Conclusion is false)
        {
            DisplayError(roleResult.ErrorDescription?.ErrorMessage);
            return;
        }

        _roleNames = roleResult.Output;
    }

    private void DisplayError(string errorMessage)
    {
        Snackbar.Add(errorMessage, Severity.Error, options =>
        {
            options.RequireInteraction = true;
            options.SnackbarVariant = Variant.Filled;
        });
    }

    protected override void Dispose(bool disposing)
    {
        _shouldRender = false;
        base.Dispose(disposing);
    }

}
@attribute [Authorize]
@page "/admin"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using ScanApp.Application.Common.Entities
@using ScanApp.Infrastructure.Persistence
@using System.Net
@using MediatR
@using Microsoft.Extensions.DependencyInjection
@using ScanApp.Application.Admin.Commands
@using ScanApp.Application.Admin.Queries
@using ScanApp.Application.Common.Interfaces
@using System.Linq.Dynamic.Core
@using ScanApp.Application.Admin.Commands.AddClaimToRole
@using ScanApp.Application.Admin.Queries.GetAllUserRoles
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceScopeFactory ScopeFactory
@inject IScopedMediator Mediator
@inject NotificationService NotificationService
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

@inherits OwningComponentBase

<h1>Admin page</h1>
<div class="container-fluid m-0">
    <div class="row">
        <div class="col-sm-6 m-0 p-1">
            <RadzenGrid Responsive="false" Data="@_users" Count="@_count" LoadData="@LoadData" TItem="ApplicationUser"
                        AllowFiltering="true" RowSelect="@(args => _selectedUser = args)"
                        AllowColumnResize="true" AllowPaging="true" PageSize="4">
                <Columns>
                    <RadzenGridColumn TItem="ApplicationUser" Property="UserName" Title="Name"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ApplicationUser" Property="Location" Title="Location"></RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
        <div class="col-sm-6 m-0 p-1">
            <RadzenGrid TItem="IdentityRole" @ref="_rolesGrid" Count="@_roleCount" Data="@_roles" RowCreate="@OnCreateRow" RowSelect="@(args => _selectedRole = args)"
                        LoadData="@(async args => await LoadRoles(args))" RowUpdate="@OnUpdate" AllowPaging="true" PageSize="4" EditMode="DataGridEditMode.Single">
                <Columns>
                    <RadzenGridColumn TItem="IdentityRole" Property="Name" Title="Name">
                        <EditTemplate Context="identityRole">
                            <RadzenTextBox @bind-value="identityRole.Name" Placeholder="@identityRole.Name"></RadzenTextBox>
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="IdentityRole" Property="ConcurrencyStamp" Title="CStamp">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="IdentityRole" Context="SampleEditContext" Bubble="false" Width="150px">
                        <Template Context="identityRole">
                            <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(identityRole))">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="identityRole">
                            <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => SaveRow(identityRole))">
                            </RadzenButton>
                            <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(identityRole))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
    <RadzenTextBox Change="@(args => _claimName = args)"></RadzenTextBox>
    <RadzenTextBox Change="@(args => _claimValue = args)"></RadzenTextBox>
    <RadzenButton Icon="add_circle_outline" Click="@(async args => await AddNewClaimToSelectedRole())" style="margin-bottom: 10px" Text="Add new claim to role" />
    <RadzenButton Icon="add_circle_outline" Click="@InsertRow" style="margin-bottom: 10px" Text="Add new role" />
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private IApplicationDbContext _applicationDbContext { get; set; }

    int _count;
    int _roleCount;
    IEnumerable<ApplicationUser> _users;
    IList<IdentityRole> _roles;
    ApplicationUser _selectedUser;
    RadzenGrid<IdentityRole> _rolesGrid;
    string _claimName;
    string _claimValue;
    IdentityRole _selectedRole;
    //protected override bool ShouldRender() => MayRender;

    async Task AddNewClaimToSelectedRole()
    {
        if (_selectedRole is null)
            return;
        var result = await Mediator.SendScoped(new AddClaimToRoleCommand(_selectedRole.Id, _claimName, _claimValue));
        var notification = new NotificationMessage()
        {
            Detail = result.ErrorDescription?.ErrorMessage ?? "All was OK",
            Severity = result.Conclusion ? NotificationSeverity.Success : NotificationSeverity.Error
        };
        ShowNotification(notification);
    }

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        _applicationDbContext = ContextFactory.CreateDbContext();
        //Users = _applicationDbContext.Users;

    }

    async Task InsertRow()
    {
        await _rolesGrid.InsertRow(new IdentityRole());
    }
    
    void EditRow(IdentityRole order)
    {
        _rolesGrid.EditRow(order);
    }

    void SaveRow(IdentityRole order)
    {
        _rolesGrid.UpdateRow(order);
    }

    async Task OnCreateRow(IdentityRole role)
    {
        _applicationDbContext.Roles.Add(role);
        await _applicationDbContext.SaveChangesAsync();
    }

    void CancelEdit(IdentityRole order)
    {
        _rolesGrid.CancelEditRow(order);

        var orderEntry = _applicationDbContext.Entry(order);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }


    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        //console.Log($"{message.Severity} notification");
    }

    async Task LoadData(LoadDataArgs args)
    {
        var query = _applicationDbContext.Users.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);

        _users = await query.Skip(args.Skip.Value).Take(args.Top.Value).OrderBy(a => a.UserName).ToListAsync();
        _count = _applicationDbContext.Users.Count();

        await InvokeAsync(StateHasChanged);
    }

    async Task LoadRoles(LoadDataArgs args)
    {
        var result = await Mediator.SendScoped(new GetAllUserRolesQuery());

        if (result.Conclusion)
        {
            _roles = result.Output.Skip(args.Skip.Value).Take(args.Top.Value).OrderBy(r => r.Name).ToList();
            _roleCount = result.Output.Count;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            ShowNotification(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Could not load roles",
                Detail = $"Something happened, roles could not be loaded:\n{result.ErrorDescription.ErrorMessage}"
            });
        }

    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _applicationDbContext.Dispose();
    }

    private async Task OnUpdate(IdentityRole obj)
    {
        obj.NormalizedName = obj.Name.ToUpperInvariant();
        var edited = _applicationDbContext.Roles.Update(obj);
        await _applicationDbContext.SaveChangesAsync();
    }

}
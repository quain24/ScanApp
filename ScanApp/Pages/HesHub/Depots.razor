@page "/depots"
@using ScanApp.Common
@using System.Threading
@using FluentValidation
@using ScanApp.Application.Common.Helpers.Result
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.HesHub.Depots
@using ScanApp.Application.HesHub.Depots.Commands.CreateNewDepot
@using ScanApp.Application.HesHub.Depots.Commands.DeleteDepot
@using ScanApp.Application.HesHub.Depots.Commands.EditDepot
@using ScanApp.Application.HesHub.Depots.Queries.AllDepots
@using ScanApp.Application.HesHub.Depots.Queries.AllGates
@using ScanApp.Application.HesHub.Depots.Queries.AllTrailerTypes
@using ScanApp.Common.Validators
@using ScanApp.Components.Table
@using Severity = MudBlazor.Severity
@using Version = ScanApp.Domain.ValueObjects.Version
@implements IDisposable
@inject IScopedMediator _mediator
@inject IContextFactory _contextFactory
@inject ISnackbar _snackbar
@inject IDialogService _dialogService

<div class="mx-auto d-flex flex-column py-2 px-1" style="max-width: 90%">
    <MudText Typo="Typo.h2">Depots</MudText>
    <SCTable Class="align-content-center flex-grow-1 flex-shrink-0 mt-3" TTableType="DepotModel" Data="_depots" Configs="_configs" @bind-SelectedItem="_selectedDepot" HorizontalScrollbar="true"
             MaxDialogContentHeight="650" ItemFactory="new Func<DepotModel>(() => new DepotModel() {Version = Version.Empty})"
             ItemCreated="OnAdd" Loading="_loading" ItemHasBeenEdited="OnEdit" EditDialogOpened="@(() => _editDialogOpen = true)" EditDialogClosed="@(() => _editDialogOpen = false)"
             FixedHeader="true" Height="650">
        <SCColumn T="DepotModel" BoundConfig="_configs.ElementAtOrDefault(6)"><MudLink Href="@($"mailto:{context.Email}")" Typo="Typo.body2">@context.Email</MudLink></SCColumn>
        <SCColumn T="DepotModel" BoundConfig="_configs.ElementAtOrDefault(8)">@($"{context.DistanceToDepot} km")</SCColumn>
    </SCTable>

    <div class="d-flex justify-content-start mt-3">
        <MudButton OnClick="@(async () => await OnDelete(_selectedDepot))"
                   Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Filled.DeleteForever"
                   Color="Color.Error" FullWidth="false" Disabled="@(_selectedDepot is null || _loading)">Delete</MudButton>
    </div>
</div>

@code {
    private volatile bool _loading;
    private readonly CancellationTokenSource _exitCancellationSource = new();
    private List<DepotModel> _depots = new();
    private List<GateModel> _gates = new();
    private List<TrailerTypeModel> _trailerTypes = new();
    private DepotModel _selectedDepot;
    private bool _editDialogOpen;

    private List<ColumnConfig<DepotModel>> _configs = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            var depots = _mediator.Send(new AllDepotsQuery(), _exitCancellationSource.Token);
            var gates = _mediator.Send(new AllGatesQuery(), _exitCancellationSource.Token);
            var trailerTypes = _mediator.Send(new AllTrailerTypesQuery(), _exitCancellationSource.Token);

            await Task.WhenAll(
                _mediator.Send(new AllDepotsQuery(), _exitCancellationSource.Token),
                _mediator.Send(new AllGatesQuery(), _exitCancellationSource.Token),
                _mediator.Send(new AllTrailerTypesQuery(), _exitCancellationSource.Token));

            var results = new List<Result>
        {
                depots.Result,
                gates.Result,
                trailerTypes.Result
            };

            foreach (var result in results)
            {
                if (result is null || result.Conclusion is false)
                {
                    _snackbar.Add(result?.ErrorDescription?.ToString(), Severity.Error);
                    return;
                }
            }

            _depots = depots.Result.Output;
            _gates = gates.Result.Output;
            _gates.Add(null);
            _trailerTypes = trailerTypes.Result.Output;
            _trailerTypes.Add(null);

            CreateConfigs();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnAdd(DepotModel model)
    {
        try
        {
            _loading = true;
            var result = await _mediator.Send(new CreateNewDepotCommand(model), _exitCancellationSource.Token);

            if (result is null)
                return;

            if (result.Conclusion is false)
            {
                _depots.Remove(model);
                _snackbar.Add(result.ErrorDescription?.ToString(), Severity.Error);
                return;
            }

            model.Version = result.Output;
            _snackbar.Add("Added new depot to Database!", Severity.Success);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnEdit((DepotModel, DepotModel) items)
    {
        try
        {
            _loading = true;
            var (old, updated) = items;
            var result = await _mediator.Send(new EditDepotCommand(old, updated), _exitCancellationSource.Token);

            if (result is null || result.Conclusion is false)
            {
                var index = _depots.FindIndex(d => Equals(d, updated));
                if (index > -1)
                    _depots[index] = old;
                _snackbar.Add(result?.ErrorDescription?.ToString(), Severity.Error);
                return;
            }

            if (result.ResultType is ResultType.NotChanged)
            {
                _snackbar.Add("No changes in depot data...", Severity.Info);
                return;
            }

            _snackbar.Add("Edited depot!", Severity.Success);
            updated.Version = result.Output;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnDelete(DepotModel model)
    {
        try
        {
            var confirmation = await _dialogService.ShowMessageBox
                (
                    "Confirm deletion",
                    $"Are you sure You want to delete depot {model.Id}?",
                    "Yes", "No"
                );

            if (confirmation is false) return;

            _loading = true;
            var result = await _mediator.Send(new DeleteDepotCommand(model.Id, model.Version), _exitCancellationSource.Token);

            if (result is null || result.Conclusion is false)
            {
                switch (result?.ErrorDescription.ErrorType)
                {
                    case ErrorType.ConcurrencyFailure:
                        _snackbar.Add("Depot could not be deleted - either it was already deleted or modified in the meantime. Refresh page and try again.", Severity.Warning);
                        break;
                    default:
                        _snackbar.Add(result?.ErrorDescription?.ToString(), Severity.Error);
                        break;
                }

                return;
            }
            _depots.Remove(model);
            _selectedDepot = null;
            _snackbar.Add("Depot has been removed!", Severity.Success);
        }
        finally
        {
            _loading = false;
        }
    }

    private void CreateConfigs()
    {
        _configs = new List<ColumnConfig<DepotModel>>
{
            ColumnBuilder<DepotModel>.For(x => x.Id)
                .ColumnStyle("width: 50px;")
                .Editable()
                .UnderName("ID")
                .ValidateUsing(new FluentValidationWrapper<int>(x =>
                {
                    x.GreaterThanOrEqualTo(0)
                    .Must(id => _depots.Any(d => d.Id == id) is false)
                    .When(id => _selectedDepot is null || id != _selectedDepot.Id || _editDialogOpen is false, ApplyConditionTo.CurrentValidator)
                    .WithMessage("{PropertyName} must be unique.");
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.Name)
                .Editable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotNull()
                        .MaximumLength(200)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Name"));
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.StreetName).Editable()
                .UnderName("Street name")
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(150)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Street name"));
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.City).Editable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(150)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("City"));
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.Country).Editable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(150)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("City"));
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.ZipCode).Editable()
                .UnderName("Zip code")
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(20)
                        .SetValidator(new ZipCodeValidator());
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.Email).Editable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(200)
                        .SetValidator(new EmailValidator());
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.PhoneNumber).Editable()
                .UnderName("Phone number")
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(30)
                        .SetValidator(new PhoneNumberValidator());
                }))
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.DistanceToDepot).Editable()
                .UnderName("Distance to depot")
                .ValidateUsing(new FluentValidationWrapper<double>(x => x.GreaterThanOrEqualTo(0)))
                .ConvertUsing(new MudBlazor.Converter<double, double>()
                {
                    SetFunc = x => Math.Round(x, 2, MidpointRounding.AwayFromZero),
                    GetFunc = x => Math.Round(x, 2, MidpointRounding.AwayFromZero)
                })
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.DefaultGate).Editable()
                .UnderName("Default gate")
                .ConvertUsing(new Converter<GateModel>()
                {
                    SetFunc = x => x?.Number.ToString() ?? "None"
                })
                .LimitValuesTo(_gates)
                .Build(),
            ColumnBuilder<DepotModel>.For(x => x.DefaultTrailer).Editable()
                .UnderName("Default trailer type")
                .ConvertUsing(new Converter<TrailerTypeModel>()
                {
                    SetFunc = x => x?.Name ?? "None"
                })
                .LimitValuesTo(_trailerTypes)
                .Build()
                };
    }

    public void Dispose()
    {
        _exitCancellationSource?.Cancel();
        _snackbar.Clear();
    }
}
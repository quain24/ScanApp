@page "/depots"
@using ScanApp.Common
@using System.Threading
@using FluentValidation
@using ScanApp.Application.Common.Helpers.Result
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.HesHub.Depots
@using ScanApp.Application.HesHub.Depots.Commands.CreateNewHub
@using ScanApp.Application.HesHub.Depots.Commands.DeleteHub
@using ScanApp.Application.HesHub.Depots.Commands.EditHub
@using ScanApp.Application.HesHub.Depots.Queries.AllHubs
@using ScanApp.Common.Validators
@using Severity = MudBlazor.Severity
@using Version = ScanApp.Domain.ValueObjects.Version
@implements IDisposable
@inject IScopedMediator _mediator
@inject IContextFactory _contextFactory
@inject ISnackbar _snackbar
@inject IDialogService _dialogService

<div class="mx-3">
    <h3>Depots</h3>

    <SCTable TTableType="DepotModel" Data="_depots" Configs="_configs" @bind-SelectedItem="_selectedDepot" HorizontalScrollbar="true"
             MaxDialogContentHeight="650" ItemFactory="new Func<DepotModel>(() => new DepotModel() {Version = Version.Empty()})"
             ItemCreated="OnAdd" Loading="_loading" ItemHasBeenEdited="OnEdit">
        <SCColumn T="DepotModel" BoundConfig="_configs[7]"><a href="mailto:@context.Email">@context.Email</a></SCColumn>
    </SCTable>

    <MudButton OnClick="@(async () => await OnDelete(_selectedDepot))"
               Class="mt-2" Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Filled.DeleteForever"
               Color="Color.Error" Disabled="@(_selectedDepot is null || _loading)">Delete</MudButton>
</div>

@code {
    private volatile bool _loading;
    private readonly CancellationTokenSource _exitCancellationSource = new();
    private List<DepotModel> _depots = new();
    private DepotModel _selectedDepot;

    private List<ColumnConfig<DepotModel>> _configs = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            var result = await _mediator.Send(new AllHubsQuery(), _exitCancellationSource.Token);

            if (result is null || result.Conclusion is false)
            {
                _snackbar.Add(result?.ErrorDescription?.ToString(), Severity.Error);
                return;
            }

            _depots = result.Output;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnAdd(DepotModel model)
    {
        try
        {
            _loading = true;
            var result = await _mediator.Send(new CreateNewHubCommand(model), _exitCancellationSource.Token);

            if (result is null)
                return;

            if (result.Conclusion is false)
            {
                _depots.Remove(model);
                _snackbar.Add(result.ErrorDescription?.ToString(), Severity.Error);
                return;
            }

            model.Version = result.Output;
            _snackbar.Add("Added new depot to Database!", Severity.Success);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnEdit((DepotModel, DepotModel) items)
    {
        try
        {
            _loading = true;
            var (old, updated) = items;
            var result = await _mediator.Send(new EditHubCommand(old, updated), _exitCancellationSource.Token);

            if (result is null || result.Conclusion is false)
            {
                var index = _depots.FindIndex(d => Equals(d, updated));
                if (index > -1)
                    _depots[index] = old;
                _snackbar.Add(result?.ErrorDescription?.ToString(), Severity.Error);
                return;
            }

            if (result.ResultType is ResultType.NotChanged)
            {
                _snackbar.Add("No changes in depot data...", Severity.Info);
                return;
            }

            _snackbar.Add("Edited depot!", Severity.Success);
            updated.Version = result.Output;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnDelete(DepotModel model)
    {
        try
        {
            var confirmation = await _dialogService.ShowMessageBox
                (
                    "Confirm deletion",
                    $"Are you sure You want to delete depot {model.Id}?",
                    "Yes", "No"
                );

            if (confirmation is false) return;

            _loading = true;
            var result = await _mediator.Send(new DeleteHubCommand(model.Id, model.Version), _exitCancellationSource.Token);

            if (result is null || result.Conclusion is false)
            {
                switch (result?.ErrorDescription.ErrorType)
                {
                    case ErrorType.ConcurrencyFailure:
                        _snackbar.Add("Depot could not be deleted - either it was already deleted or modified in the meantime. Refresh page and try again.", Severity.Warning);
                        break;
                    default:
                        _snackbar.Add(result?.ErrorDescription?.ToString(), Severity.Error);
                        break;
                }

                return;
            }
            _depots.Remove(model);
            _selectedDepot = null;
            _snackbar.Add("Depot has been removed!", Severity.Success);
        }
        finally
        {
            _loading = false;
        }
    }

    protected override void OnInitialized()
    {
        _configs = new List<ColumnConfig<DepotModel>>
{
        ColumnBuilder<DepotModel>.For(x => x.Id)
            .ColumnStyle("width: 50px;")
            .Editable()
            .UnderName("ID")
            .ValidateUsing(new FluentValidationWrapper<int>(x =>
            {
                x.GreaterThanOrEqualTo(0)
                .Must(id => _depots.Any(d => d.Id == id) is false)
                .When(id => _selectedDepot is null || id != _selectedDepot.Id)
                .WithMessage("{PropertyName} must be unique.");
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.Name)
            .Editable()
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotNull()
                    .MaximumLength(20)
                    .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Name"));
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.StreetName).Editable()
            .UnderName("Street name")
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotEmpty()
                    .NotNull()
                    .MaximumLength(150)
                    .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Street name"));
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.StreetNumber).Editable()
            .UnderName("Street number")
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.MaximumLength(15)
                    .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Street number"))
                    .When(x => string.IsNullOrEmpty(x) is false);
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.City).Editable()
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotEmpty()
                    .NotNull()
                    .MaximumLength(150)
                    .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("City"));
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.Country).Editable()
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotEmpty()
                    .NotNull()
                    .MaximumLength(150)
                    .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("City"));
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.ZipCode).Editable()
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotEmpty()
                    .NotNull()
                    .MaximumLength(20)
                    .SetValidator(new ZipCodeValidator());
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.Email).Editable()
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotEmpty()
                    .NotNull()
                    .MaximumLength(200)
                    .SetValidator(new EmailValidator());
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.PhonePrefix).Editable()
            .UnderName("Phone prefix")
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotEmpty()
                    .NotNull()
                    .MaximumLength(10)
                    .SetValidator(new PhoneNumberValidator());
            }))
            .Build(),
        ColumnBuilder<DepotModel>.For(x => x.PhoneNumber).Editable()
            .UnderName("Phone number")
            .ValidateUsing(new FluentValidationWrapper<string>(x =>
            {
                x.NotEmpty()
                    .NotNull()
                    .MaximumLength(25)
                    .SetValidator(new PhoneNumberValidator());
            }))
            .Build(),
    };
    }

    public void Dispose()
    {
        _exitCancellationSource?.Cancel();
        _snackbar.Clear();
    }
}
@using ScanApp.Models.HesHub.DeparturePlans
@using ScanApp.Application.HesHub.DeparturePlans.Queries.AllGates
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using System.Threading
@using ScanApp.Common.Helpers

<SfTextBox @bind-Value="DeparturePlan.Subject" Placeholder="Subject..."/>
<SfTextBox @bind-Value="DeparturePlan.Description" Placeholder="Description..." Multiline="true"/>

<SfDateTimePicker @ref="StartDate" @bind-Value="DeparturePlan.StartTime" OnChange="@(UpdateEndDate)"></SfDateTimePicker>
<SfDateTimePicker @ref="EndDate" @bind-Value="DeparturePlan.EndTime" Min="DeparturePlan.StartTime"></SfDateTimePicker>

<MudInputLabel>Gate number</MudInputLabel>
<SfDropDownList TValue="int?" TItem="GateModel" DataSource="@Gates" @bind-Value="@DeparturePlan.GateId" ShowClearButton="true" Placeholder="None">
    @foreach (var gate in Gates)
    {
        <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
    }
</SfDropDownList>

@* Show recurrence editor only when appointment is not an exception. *@
@if (DeparturePlan?.RecurrenceID is null)
{
    <SfRecurrenceEditor @bind-Value="DeparturePlan.RecurrenceRule"></SfRecurrenceEditor>
}

@code {
    [Parameter] public DeparturePlanGuiModel DeparturePlan { get; set; }
    [Parameter] public ResourceDataProvider ResourceDataProvider { get; set; }

    List<GateModel> Gates = new();

    private SfDateTimePicker<DateTime> StartDate;
    private SfDateTimePicker<DateTime> EndDate;

    protected override async Task OnInitializedAsync()
    {
        Gates.AddRange(await ResourceDataProvider.GetGates(CancellationToken.None));
        Gates.Sort((x, y) => new WordAndNumberStringComparer().Compare(x?.Name, y?.Name));
        await base.OnInitializedAsync();
    }

    private void UpdateEndDate(ChangeEventArgs args)
    {
        var data = (DateTime?)args.Value;
        if (data.HasValue is false)
            return;
        if (data <= StartDate.Value)
            EndDate.Value = StartDate.Value + TimeSpan.FromMinutes(30);
    }

}
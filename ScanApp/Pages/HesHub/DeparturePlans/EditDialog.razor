@using ScanApp.Models.HesHub.DeparturePlans
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using TimeZoneConverter
@using Orientation = MudBlazor.Orientation

<MudDialog>
    <DialogContent>
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudTextField @bind-Value="Data.Subject" Label="Subject" OnKeyDown="OnKeyDownPress" Class="my-2" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="Data.Description" Label="Description" OnKeyDown="OnKeyDownPress" Lines="5" Class="my-2" Variant="Variant.Outlined" />

            </MudItem>
            <MudItem xs="12">
                <MudField Label="Start date and time" Variant="Variant.Outlined">
                    <MudDatePicker @bind-Date="Data.StartDatePortion" AutoClose="true" AllowKeyboardInput="true" PickerVariant="PickerVariant.Dialog" />
                    <MudTimePicker @bind-Time="Data.StartTimePortion" AutoClose="true" AllowKeyboardInput="true" PickerVariant="PickerVariant.Dialog" />
                </MudField>
            </MudItem>
            <MudItem xs="12">
                <MudField Label="End date and time" Variant="Variant.Outlined">
                    <div class="d-flex flex-row">
                        <MudDatePicker @bind-Date="Data.EndDatePortion" Label="End date" Class="ml-0 pr-2" AutoClose="true" AllowKeyboardInput="true" />
                        <MudTimePicker @bind-Time="Data.EndTimePortion" Label="End time" Class="ml-auto px-2" AutoClose="true" AllowKeyboardInput="true" />
                        <MudCheckBox @bind-Checked="_enableEndTimezone" Dense="true" Class="mr-0 align-self-end px-2">Timezone</MudCheckBox>
                    </div>
                    @if (_enableEndTimezone)
                    {
                        <div class="d-flex flex-row">
                            <MudAutocomplete T="string" @bind-Value="Data.EndTimezone" Clearable="true" SearchFunc="@Search" MaxItems="512"/>
                        </div>
                    }
                </MudField>
            </MudItem>
            @* Show recurrence editor only when appointment is not an exception. *@
            @if (EditAction is CurrentAction.EditSeries or CurrentAction.EditFollowingEvents or CurrentAction.Add or CurrentAction.Save)
            {
                <MudItem xs="12">
                    <MudField Label="Recurrence" Variant="Variant.Outlined">
                        <SfRecurrenceEditor @bind-Value="Data.RecurrenceRule"></SfRecurrenceEditor>
                    </MudField>
                </MudItem>
            }
            </MudGrid>
    </DialogContent>

    <DialogActions>
        <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_success" OnClick="Submit">Submit</MudButton>
        <MudButton Class="ml-auto" Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
        <MudButton Class="mr-2" Variant="Variant.Filled" Color="Color.Error" Disabled="!_success" OnClick="Delete">Delete</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public DeparturePlanGuiModel Data { get; set; }
    [Parameter]
    public CurrentAction? DeleteAction { get; set; }
    [Parameter]
    public CurrentAction? EditAction { get; set; }

    private bool _success = true;
    private readonly Type _returnType = typeof(ValueTuple<,>).MakeGenericType(typeof(DeparturePlanGuiModel), typeof(CurrentAction?));
    private bool _enableStartTimezone;
    private bool _enableEndTimezone;
    private readonly List<string> _timezones = TZConvert.KnownIanaTimeZoneNames.Append(null).ToList();
    
    private Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(_timezones.AsEnumerable());
        return Task.FromResult(_timezones.Where(x => x?.Contains(value, StringComparison.InvariantCultureIgnoreCase) ?? false));
    }

    protected override void OnInitialized()
    {
        _enableEndTimezone = Data?.EndTimezone is not null;
        base.OnInitialized();
    }

    public async Task Submit()
    {
        //Data.EndTimezone = Data.EndTimezone is null ? null : TZConvert.WindowsToIana(Data.EndTimezone);
        MudDialog.Close(DialogResult.Ok((Data, EditAction), _returnType));
    }

    public async Task Delete()
    {
        MudDialog.Close(DialogResult.Ok((Data, DeleteAction), _returnType));
    }

    public void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task OnKeyDownPress(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
                await Submit();
                break;

            case "Escape":
                Cancel();
                break;
        }
    }
}

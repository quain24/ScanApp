@using ScanApp.Models.HesHub.DeparturePlans
@using TimeZoneConverter
@inject IDialogService _dialogService

<MudDialog>
    <DialogContent>
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudTextField @bind-Value="Data.Subject" Class="my-2" Label="Subject" OnKeyDown="OnKeyDownPress" Variant="Variant.Outlined"/>
                <MudTextField @bind-Value="Data.Description" Class="my-2" Label="Description" Lines="5" OnKeyDown="OnKeyDownPress" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudField Label="Start date and time" Class="d-flex flex-column" Variant="Variant.Outlined">
                    <div class="d-flex flex-row">
                        <MudDatePicker @bind-Date="Data.StartDatePortion" Label="Start date" Class="ml-0 pr-2" AutoClose="true" AllowKeyboardInput="true" />
                        <MudTimePicker @bind-Time="Data.StartTimePortion" Label="Start time" Class="ml-auto px-2" AutoClose="true" AllowKeyboardInput="true" />
                    </div>
                    <div class="d-flex flex-row">
                        <MudDatePicker @bind-Date="Data.EndDatePortion" Label="End date" Class="ml-0 pr-2" AutoClose="true" AllowKeyboardInput="true" />
                        <MudTimePicker @bind-Time="Data.EndTimePortion" Label="End time" Class="ml-auto px-2" AutoClose="true" AllowKeyboardInput="true" />
                    </div>
                    @if (_enableTimezone)
                    {
                        <div class="d-flex flex-row">
                            <MudAutocomplete T="string" Value="Data.StartTimezone" ToStringFunc="TimezoneSelectFormatter" Clearable="true"
                                             ResetValueOnEmptyText="true" SearchFunc="@Search" MaxItems="1024" CoerceText="true"
                                             ValueChanged="OnStartTimezoneChanged" Label="Start timezone" Class="ml-0 pr-2" />
                            <MudAutocomplete T="string" @bind-Value="Data.EndTimezone" ToStringFunc="TimezoneSelectFormatter" Clearable="true"
                                             ResetValueOnEmptyText="true" SearchFunc="@Search" MaxItems="1024" CoerceText="true"
                                             Label="End timezone" Class="ml-auto px-2" />
                        </div>
                    }
                    <MudCheckBox @bind-Checked="_enableTimezone" Dense="true" Class="ml-n2 pt-2">Enable timezones</MudCheckBox>
                </MudField>
            </MudItem>
            @* Show recurrence editor only when appointment is not an exception. *@
            @if (EditAction is not CurrentAction.EditOccurrence)
            {
                <MudItem xs="12">
                    <MudField Label="Recurrence" Variant="Variant.Outlined">
                        <SfRecurrenceEditor @bind-Value="Data.RecurrenceRule"></SfRecurrenceEditor>
                    </MudField>
                </MudItem>
            }
        </MudGrid>
    </DialogContent>

    <DialogActions>
        <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_success" OnClick="Submit">Submit</MudButton>
        <MudButton Class="ml-auto" Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
        <MudButton Class="mr-2" Variant="Variant.Filled" Color="Color.Error" Disabled="@(!_success || Data?.Id == 0)" OnClick="Delete">Delete</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public DeparturePlanGuiModel Data { get; set; }
    [Parameter]
    public CurrentAction? DeleteAction { get; set; }
    [Parameter]
    public CurrentAction? EditAction { get; set; }

    private readonly Type _returnType = typeof(ValueTuple<,>).MakeGenericType(typeof(DeparturePlanGuiModel), typeof(CurrentAction?));
    private bool _success = true;
    private bool _enableTimezone;
    private Dictionary<string, TimeSpan> _timezones;

    private Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(_timezones?.Keys.AsEnumerable());
        return Task.FromResult(_timezones?.Keys.Where(x => x?.Contains(value, StringComparison.InvariantCultureIgnoreCase) ?? false));
    }

    protected override void OnInitialized()
    {
        _enableTimezone = Data?.EndTimezone is not null || Data?.StartTimezone is not null;
        _timezones = GetKnownTimezones();

        base.OnInitialized();
    }

    private static Dictionary<string, TimeSpan> GetKnownTimezones()
    {
        return TimeZoneInfo
            .GetSystemTimeZones()
            .Select(x => (TZConvert.WindowsToIana(x.Id), x.BaseUtcOffset))
            .GroupBy(x => x.Item1)
            .Select(y => y.First())
            .ToDictionary(x => x.Item1, x => x.BaseUtcOffset);
    }

    private string TimezoneSelectFormatter(string timezoneId)
    {
        if (timezoneId is null || _timezones is null || _timezones.TryGetValue(timezoneId, out var offset) is false)
            return null;
        return $"{timezoneId} ({(offset < TimeSpan.Zero ? '-' : '+')}{offset:hh\\:mm})";
    }

    private async Task Submit()
    {
        if (_enableTimezone is false)
        {
            Data.EndTimezone = null;
            Data.StartTimezone = null;
        }
        MudDialog.Close(DialogResult.Ok((Data, EditAction), _returnType));
    }

    private async Task Delete()
    {
        var type = EditAction switch
        {
            CurrentAction.EditOccurrence => "occurrence",
            _ => "series"
        };

        var confirmation = await _dialogService.ShowMessageBox("Confirm deletion.",
            $"Do you really want to delete this {type}?", "Yes", "No", null, new DialogOptions
            {
                DisableBackdropClick = true
            });

        if (confirmation is null or false) return;
        MudDialog.Close(DialogResult.Ok((Data, DeleteAction), _returnType));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task OnKeyDownPress(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
                await Submit();
                break;

            case "Escape":
                Cancel();
                break;
        }
    }

    private void OnStartTimezoneChanged(string timezoneId)
    {
        var _ = Data.StartTimezone == Data.EndTimezone
            ? Data.StartTimezone = Data.EndTimezone = timezoneId
            : Data.StartTimezone = timezoneId;
    }
}
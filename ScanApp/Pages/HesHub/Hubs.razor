@page "/hubs"
@using ScanApp.Domain.Entities
@using ScanApp.Domain.ValueObjects
@using ScanApp.Common
@using System.Data
@using System.Threading
@using FluentValidation
@using Microsoft.EntityFrameworkCore
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.HesHub.Hubs
@using ScanApp.Application.HesHub.Hubs.Commands
@using ScanApp.Application.HesHub.Hubs.Queries.AllHubs
@using ScanApp.Common.Validators
@inject IScopedMediator _mediator
@inject IContextFactory _contextFactory 

<h3>Hub list</h3>

<SCTable TTableType="HesHubModel" Data="_depots" Configs="_configs" @bind-SelectedItem="_selectedDepot" ItemFactory=""></SCTable>

@code {
    private List<HesHubModel> _depots = new();
    private HesHubModel _selectedDepot;


    private List<ColumnConfig<HesHubModel>> _configs = new();

    protected override async Task OnInitializedAsync()
    {
        _depots = (await _mediator.Send(new AllHubsQuery(), CancellationToken.None)).Output;

        
    }

    protected override void OnInitialized()
    {
        _configs = _configs = new()
        {
            ColumnBuilder<HesHubModel>.For(x => x.Id)
                    .ColumnStyle("width: 50px;")
                    .Editable()
                    .Groupable()
                    .UnderName("ID")
                    .ValidateUsing(new FluentValidationWrapper<int>(x =>
                    {
                        x.GreaterThanOrEqualTo(0)
                         .Must(id => _depots.Any(d => d.Id == id) is false)
                         .When(id => id != _selectedDepot?.Id)
                         .WithMessage("ID must be unique.");
                    }))
                    .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.Name)
                .Editable()
                .Groupable()
                .ValidateUsing(new StandardNamingValidator(200))
                .Build()
        };
    }

}
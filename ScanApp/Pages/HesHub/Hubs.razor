@page "/hubs"
@using ScanApp.Common
@using System.Threading
@using FluentValidation
@using ScanApp.Application.Common.Helpers.Result
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.HesHub.Hubs
@using ScanApp.Application.HesHub.Hubs.Commands.CreateNewHub
@using ScanApp.Application.HesHub.Hubs.Commands.EditHub
@using ScanApp.Application.HesHub.Hubs.Queries.AllHubs
@using ScanApp.Common.Validators
@using Severity = MudBlazor.Severity
@using Version = ScanApp.Domain.ValueObjects.Version
@implements IDisposable
@inject IScopedMediator _mediator
@inject IContextFactory _contextFactory
@inject ISnackbar _snackbar

<h3>Hub list</h3>

<SCTable TTableType="HesHubModel" Data="_depots" Configs="_configs"
         @bind-SelectedItem="_selectedDepot" MaxDialogContentHeight="650" ItemFactory="new Func<HesHubModel>(() => new HesHubModel(){Version = Version.Empty()})"
         ItemCreated="OnAdd" Loading="_loading" ItemHasBeenEdited="@(x => OnEdit(x))"></SCTable>

@code {
    private volatile bool _loading;
    private readonly CancellationTokenSource _exitCancellationSource = new();
    private List<HesHubModel> _depots = new();
    private HesHubModel _selectedDepot;

    private List<ColumnConfig<HesHubModel>> _configs = new();

    protected override async Task OnInitializedAsync()
    {
        _depots = (await _mediator.Send(new AllHubsQuery(), CancellationToken.None)).Output;
    }

    private async Task OnAdd(HesHubModel model)
    {
        try
        {
            _loading = true;
            var result = await _mediator.Send(new CreateNewHubCommand(model), _exitCancellationSource.Token);

            if (result is null)
                return;

            if (result.Conclusion is false)
            {
                _depots.Remove(model);
                _snackbar.Add(result.ErrorDescription?.ToString(), Severity.Error);
                return;
            }

            _snackbar.Add("Added new depot to Database!", Severity.Success);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnEdit((HesHubModel, HesHubModel) items)
    {
        try
        {
            _loading = true;
            var (old, updated) = items;
            var result = await _mediator.Send(new EditHubCommand(old, updated), _exitCancellationSource.Token);

            if(result is null)
                return;

            if (result.Conclusion is false)
            {
                var index = _depots.FindIndex(d => Equals(d, updated));
                if (index > -1)
                    _depots[index] = old;
                _snackbar.Add(result.ErrorDescription?.ToString(), Severity.Error);
                return;
            }

            if (result.ResultType is ResultType.NotChanged)
            {
                _snackbar.Add("No changes in depot data...", Severity.Info);
                return;
            }

            _snackbar.Add("Edited depot!", Severity.Success);
            updated.Version = result.Output;
        }
        finally
        {
            _loading = false;
        }
    }

    protected override void OnInitialized()
    {
        _configs = new List<ColumnConfig<HesHubModel>>
        {
            ColumnBuilder<HesHubModel>.For(x => x.Id)
                .ColumnStyle("width: 50px;")
                .Editable()
                .Groupable()
                .UnderName("ID")
                .ValidateUsing(new FluentValidationWrapper<int>(x =>
                {
                    x.GreaterThanOrEqualTo(0)
                    .Must(id => _depots.Any(d => d.Id == id) is false)
                    .When(id => _selectedDepot is null || id != _selectedDepot.Id)
                    .WithMessage("{PropertyName} must be unique.");
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.Name)
                .Editable()
                .Groupable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotNull()
                        .MaximumLength(20)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Name"));
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.StreetName).Editable().Groupable()
                .UnderName("Street name")
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(150)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Street name"));
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.StreetNumber).Editable().Groupable()
                .UnderName("Street number")
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.MaximumLength(15)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("Street number"))
                        .When(x => string.IsNullOrEmpty(x) is false);
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.City).Editable().Groupable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(150)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("City"));
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.Country).Editable().Groupable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(150)
                        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator("City"));
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.ZipCode).Editable().Groupable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(20)
                        .SetValidator(new ZipCodeValidator());
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.Email).Editable().Groupable()
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(200)
                        .SetValidator(new EmailValidator());
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.PhonePrefix).Editable().Groupable()
                .UnderName("Phone prefix")
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(10)
                        .SetValidator(new PhoneNumberValidator());
                }))
                .Build(),
            ColumnBuilder<HesHubModel>.For(x => x.PhoneNumber).Editable().Groupable()
                .UnderName("Phone number")
                .ValidateUsing(new FluentValidationWrapper<string>(x =>
                {
                    x.NotEmpty()
                        .NotNull()
                        .MaximumLength(25)
                        .SetValidator(new PhoneNumberValidator());
                }))
                .Build(),
        };
    }

    public void Dispose()
    {
        _exitCancellationSource?.Cancel();
        _snackbar.Clear();
    }
}
@page "/Alttable"

@using Version = ScanApp.Domain.ValueObjects.Version
@using ScanApp.Data
@using ScanApp.Models.SpareParts
@using ScanApp.Common.Interfaces
@using ScanApp.Common
@using FluentValidation
@inject WeatherForecastService ForecastService
@inject IDateTime DateTime

<h1>Alt table</h1>

<SCTable @ref="table" RowsPerPage="100" MaxTableHeight="500" FixedHeader="true" TTableType="WeatherForecast"
         Data="@forecasts" Configs="@cc.ToList()" @bind-SelectedItem="@WeatherForecast" @bind-SelectedItems="WeatherForecasts" />
<MudButton OnClick="@(_ => Remove())">Delete</MudButton>
<MudButton OnClick="@(_ => table.OpenEditItemDialog())">Edit</MudButton>
<MudButton OnClick="@(_ => table.OpenFilterItemDialog())">Filter</MudButton>

<MudText>@(WeatherForecast?.Summary ?? string.Empty)</MudText>
<MudText>
    <li>
        @foreach (var w in WeatherForecasts ?? Enumerable.Empty<WeatherForecast>())
        {
            <ul>@w.Summary</ul>
        }
    </li>
</MudText>

@code
{
    public ColumnConfig<WeatherForecast>[] cc = new[]
    {
        ColumnBuilder<WeatherForecast>.For(c => c.Summary)
            .UnderName("Simple summary")
            .ValidateUsing(new FluentValidationWrapper<string>(x => x.NotEmpty().MinimumLength(5).MaximumLength(20)))
            .Create(),
        ColumnBuilder<WeatherForecast>.For(c => c.TemperatureC)
            .UnderName("Temperature in C")
            .ValidateUsing(new FluentValidationWrapper<int>(x => x.NotEmpty().GreaterThan(10)))
            .Create(),
        ColumnBuilder<WeatherForecast>.For(c => c.Date)
            .FormatAs(FieldType.Date)
            .ValidateUsing(new FluentValidationWrapper<DateTime?>(x => x.GreaterThan(System.DateTime.Today + TimeSpan.FromDays(-10))))
            .Create(),
        ColumnBuilder<WeatherForecast>.For(c => c.Date)
            .UnderName("Separate time column")
            .FormatAs(FieldType.Time)
            .ValidateUsing(new FluentValidationWrapper<DateTime?>(x => x.GreaterThan(System.DateTime.Today + TimeSpan.FromDays(-10))))
            .Create(),
        ColumnBuilder<WeatherForecast>.For(c => c.Version)
            .UnderName("A version")
            .ValidateUsing(new FluentValidationWrapper<Version>(x => x.Must(c => c.IsEmpty != true)))
            .ConverterUsing(new Converter<Version>
            {
                SetFunc = value => value.Value,
                GetFunc = Version.Create
            })
            .Create(),
        ColumnBuilder<WeatherForecast>.For(c => c.Number)
            .UnderName("Const number")
            .Create(),
        ColumnBuilder<WeatherForecast>.For(c => c.Model.Name)
            .UnderName("Model name")
            .Create(),
        ColumnBuilder<WeatherForecast>.For(c => c.nulldate)
            .UnderName("Null Date")
            .AsNonFilterable()
            .AsNonGroupable()
            .AsReadOnly()
            .Create()
    };

    public ColumnConfig<WeatherForecast>[] altConifgWay = new[]
    {
        new ColumnConfig<WeatherForecast>(c => c.Summary, "Simple summary", new FluentValidationWrapper<string>(x => x.NotEmpty().MinimumLength(5).MaximumLength(20))),
        new ColumnConfig<WeatherForecast>(c => c.TemperatureC, "Temperature in C", new FluentValidationWrapper<int>(x => x.NotEmpty().GreaterThan(10))),
        new ColumnConfig<WeatherForecast>(c => c.Date, null, FieldType.Date, new FluentValidationWrapper<DateTime?>(x => x.GreaterThan(System.DateTime.Today + TimeSpan.FromDays(-10)))),
        new ColumnConfig<WeatherForecast>(c => c.Date, "Separate time column", FieldType.Time, new FluentValidationWrapper<DateTime?>(x => x.GreaterThan(System.DateTime.Today + TimeSpan.FromDays(-10)))),
        new ColumnConfig<WeatherForecast>(c => c.Version, "A version", new FluentValidationWrapper<Version>(x => x.Must(c => c.IsEmpty != true)))
            .AssignConverter(new Converter<Version>
            {
                SetFunc = value => value.Value,
                GetFunc = Version.Create
            }),
        new ColumnConfig<WeatherForecast>(c => c.Number, "Const number"),
        new ColumnConfig<WeatherForecast>(c => c.Model.Name, "Model name"),
        new ColumnConfig<WeatherForecast>(c => c.nulldate, "Null Date")
    };

    public WeatherForecast WeatherForecast { get; set; }
    public HashSet<WeatherForecast> WeatherForecasts { get; set; } = new HashSet<WeatherForecast>();

    private List<WeatherForecast> forecasts;

    private SCTable<WeatherForecast> table;

    private void Remove()
    {
        forecasts.Remove(WeatherForecast);
        WeatherForecast = null;
    }

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await ForecastService.GetForecastAsync(DateTime.Now)).ToList();
        //forecasts.Add(new WeatherForecast()
        //{
        //    Version = Version.Empty(),
        //    TemperatureC = 10,
        //    Summary = null,
        //    Date = null,
        //    Model = null
        //});
        forecasts.Add(new WeatherForecast()
        {
            Version = Version.Create("addddddddd"),
            TemperatureC = 21,
            Summary = "asdasdasdasdasd",
            Date = System.DateTime.Today,
            Model = new SparePartGUIModel()
        });
        var rand = new Random(12345);
        for (int i = 0; i < 2000; i++)
        {
            forecasts.Add(new WeatherForecast() { Date = DateTime.Now, Summary = rand.Next(5000000).ToString(), TemperatureC = rand.Next(21, 46) });
        }
    }
}
@page "/Alttable"
@using ScanApp.Data
@using ScanApp.Components.Common.ScanAppTable.Options
@using ScanApp.Components.Common.AltTableTest
@using ScanApp.Common.Interfaces
@using ScanApp.Common
@using FluentValidation
@using ScanApp.Models.SpareParts
@using Version = ScanApp.Domain.ValueObjects.Version
@inject WeatherForecastService ForecastService
@inject IDateTime DateTime

<h1>Alt table</h1>

<Alttablecomponent2 TTableType="WeatherForecast" @bind-Data="@forecasts" Configs="@cc.ToList()" @bind-SelectedItem="@WeatherForecast"/>

@code
{
    public ColumnConfig<WeatherForecast>[] cc = new[]
    {
        new ColumnConfig<WeatherForecast>(c => c.Summary, "Simple summary", new FluentValidationWrapper<string>(x => x.NotEmpty().MinimumLength(5).MaximumLength(20))),
        new ColumnConfig<WeatherForecast>(c => c.TemperatureC, "Temperature in C", new FluentValidationWrapper<int>(x => x.NotEmpty().GreaterThan(10))),
        new ColumnConfig<WeatherForecast>(c => c.Date, null, new FluentValidationWrapper<DateTime?>(x => x.GreaterThan(System.DateTime.Today + TimeSpan.FromDays(10)))),
        new ColumnConfig<WeatherForecast>(c => c.Version, "A version", new FluentValidationWrapper<ScanApp.Domain.ValueObjects.Version>(x => x.Must(c => c.IsEmpty != true)))
        {
            IsEditable = false
        },
        new ColumnConfig<WeatherForecast>(c => c.Number, "Const number"),
        new ColumnConfig<WeatherForecast>(c => c.Model.Name, "Model name")
    };

    public ColumnConfig<SparePartGUIModel>[] ccc = new[]
    {
        new ColumnConfig<SparePartGUIModel>(c => c.Name, "Part name", new FluentValidationWrapper<string>(x => x.NotEmpty().MaximumLength(10))),
        new ColumnConfig<SparePartGUIModel>(c => c.Amount, null, new FluentValidationWrapper<int>(x => x.InclusiveBetween(0, 10)))
    };

    public List<SparePartGUIModel> parts { get; set; }

    public SparePartGUIModel part { get; set; }

    public WeatherForecast WeatherForecast { get; set; }

    private List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        parts = new List<SparePartGUIModel>()
        {
            new SparePartGUIModel("part one", 0),
            new SparePartGUIModel("part two", 0),
            new SparePartGUIModel("part three", 0),
            new SparePartGUIModel("part four", 0)
        };


        forecasts = (await ForecastService.GetForecastAsync(DateTime.Now)).ToList();
        forecasts.Add(new WeatherForecast()
        {
            Version = Version.Empty(),
            TemperatureC = 10,
            Summary = null,
            Date = null
        });
        //for (int i = 0; i < 1000; i++)
        //{
        //    forecasts.Add(new WeatherForecast() { Date = DateTime.Now, Summary = new Random(1234).Next(5000000).ToString(), TemperatureC = 24 });
        //}
    }
}
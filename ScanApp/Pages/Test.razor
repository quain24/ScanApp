@attribute [Authorize]
@page "/Test"
@using Microsoft.EntityFrameworkCore
@using ScanApp.Infrastructure.Persistence
@using Microsoft.Extensions.DependencyInjection
@using ScanApp.Application.Admin
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.SpareParts
@using ScanApp.Application.SpareParts.Queries.AllSparePartTypes
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using ScanApp.Application.Admin.Commands.AddNewUserRole
@using ScanApp.Application.Admin.Queries.GetAllUsers
@using ScanApp.Application.SpareParts.Queries.SparePartStoragePlacesForCurrentUser
@using ScanApp.Components.Common
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> AppDbContextFactory
@inject IServiceScopeFactory ScopeFactory
@inject IScopedMediator Mediator
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject IUserInfo Info
@inject IWebHostEnvironment env
@inject ISnackbar   Snackbar
@inject IWebHostEnvironment Environment
@inject IUserManager UserManager

@inject ICurrentUserService CurrentUserService

@inherits OwningComponentBase

<h1>Test page</h1>
<div class="container-fluid m-0">
    <div class="row">
        <div class="col-sm-10 m-0 p-1">
        </div>
    </div>

    Camera opens straight away
    <ScanApp.Components.Common.CamUploader Disabled="b" OnUploadFailed="@FileFailed" UploadTimeLimit="1000" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader UserCanCancel="false" OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader SingleImageMode="true" OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader @ref="@uploader" Text="active upload" OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader @ref="@uploader2" Text="singleUpload" SingleImageMode="true" OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader @bind-UploadedFiles="@lis" Text="listbind" OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader><ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader><ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader><ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>
    <ScanApp.Components.Common.CamUploader OnUploadFailed="@FileFailed" SavePath="@(Environment.WebRootPath + "\\Upload\\SpareParts\\")" OnUploadPercentageChanged="@PercentageChanged" OnUploadSuccessful="@FileUploaded"></ScanApp.Components.Common.CamUploader>

    <MudButton OnClick="@(() => b = !b)">Disable first one</MudButton>

    <br>
    <br>

    @if (uploader is not null)
    {
        foreach (var file in uploader.UploadedFiles)
        {
            <img src="@($"{file.DirectoryName.Substring(Environment.WebRootPath.Length)}\\{file.Name}?ts={file.LastWriteTime.Ticks}")" />
        }
    }

    @if (uploader2?.UploadedFile is not null)
    {
        <img src="@($"{uploader2.UploadedFile.DirectoryName.Substring(Environment.WebRootPath.Length)}\\{uploader2.UploadedFile.Name}?ts={uploader2.UploadedFile.LastWriteTime.Ticks}")" />
    }

    @foreach(var o in lis ?? new List<FileInfo>(0))
    {
        <img src="@($"{o.DirectoryName.Substring(Environment.WebRootPath.Length)}\\{o.Name}?ts={o.CreationTime.Ticks}")" />
    }

    <AuthorizeView Policy="@nameof(Policies.LocationMustBeSady)">
        <Authorized>
            <ul>
                @foreach (var t in _cm ?? new List<ClaimModel>())
                {
                    <li>@t.Type || @t.Value</li>
                }
            </ul>
        </Authorized>
        <NotAuthorized>User not authorized</NotAuthorized>
    </AuthorizeView>

    <ul>
        @foreach (var t in _types ?? new List<SparePartTypeModel>())
        {
            <li>@t.Name</li>
        }
    </ul>

    <ul>
        @foreach (var t in _rs)
        {
            <li>@t.Id</li>
            <li>@t.Number</li>
        }
    </ul>
</div>

@code {
    bool b = true;

    CamUploader uploader;
    CamUploader uploader2;

    public IList<FileInfo> lis = new List<FileInfo>();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private List<SparePartTypeModel> _types { get; set; } = new List<SparePartTypeModel>();
    private List<RepairWorkshopModel> _rs { get; set; } = new List<RepairWorkshopModel>();
    private List<ClaimModel> _cm;
    double i = 0;

    public void FileUploaded(FileInfo upload)
    {
        Snackbar.Add($"<ul><li>New file: {upload.Name}</li><li>Sizes: {upload.Length}</li><li>Path: {upload.DirectoryName}</li></ul>", Severity.Success, options => options.SnackbarVariant = Variant.Filled);
    }

    public void FileFailed(Exception ex)
    {
        Snackbar.Add(ex.Message, Severity.Error);
    }

    public void PercentageChanged(int percents)
    {
        //Snackbar.Add($"Uploaded {percents}%", Severity.Info, options => options.SnackbarVariant = Variant.Filled);
    }

    protected override async Task OnInitializedAsync()
    {
        var t = await Mediator.Send(new AddNewUserRoleCommand("@#$"));
    //_types = (await Mediator.Send(new AllSparePartTypesQuery())).Output;
    _rs = (await Mediator.Send(new SparePartStoragePlacesForCurrentUserQuery())).Output; //(await Mediator.Send(new StoragePlacesByLocationQuery((await AuthenticationStateTask).LocationId()))).Output;

    //_cm = await CurrentUserService.AllClaims();
    //var ui = await CurrentUserService.IsInRole("Admin");
    //var t = "";
    //var name = (await AuthenticationStateTask).Name();
    //var t = await Info.GetClaims(name);
    //var y = "";
    }

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        //ApplicationDbCtx = ContextFactory.CreateDbContext();

    }

    protected override void Dispose(bool disposing)
    {
        Console.WriteLine("==========================================================");
        //ApplicationDbCtx.Dispose();
        base.Dispose(disposing);
    }
}
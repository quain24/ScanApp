@attribute [Authorize]
@page "/Test"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using ScanApp.Infrastructure.Persistence
@using Microsoft.Extensions.DependencyInjection
@using ScanApp.Application
@using ScanApp.Application.Admin
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Admin.Queries.GetAllUserRoles
@using ScanApp.Application.SpareParts
@using ScanApp.Application.SpareParts.Queries.AllSparePartTypes
@using ScanApp.Application.SpareParts.Queries.StoragePlacesByLocation
@using ScanApp.Application.SpareParts.Queries.StoragePlacesForCurrentUser
@using ScanApp.Common.Extensions
@using ScanApp.Domain.Entities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> AppDbContextFactory
@inject IServiceScopeFactory ScopeFactory
@inject IScopedMediator Mediator
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject IUserInfo Info

@inject ICurrentUserService CurrentUserService

@inherits OwningComponentBase

<h1>Test page</h1>
<div class="container-fluid m-0">
    <div class="row">
        <div class="col-sm-10 m-0 p-1">
        </div>
    </div>

    <AuthorizeView Policy="@nameof(Policies.LocationMustBeSady)">
        <Authorized>
            <ul>
                @foreach (var t in _cm ?? new List<ClaimModel>())
                {
                    <li>@t.Type || @t.Value</li>
                }
            </ul>
        </Authorized>
        <NotAuthorized>User not authorized</NotAuthorized>
    </AuthorizeView>

    <ul>
        @foreach (var t in _types ?? new List<SparePartTypeModel>())
        {
            <li>@t.Name</li>
        }
    </ul>

    <ul>
        @foreach (var t in _rs)
        {
            <li>@t.Id</li>
            <li>@t.Number</li>
        }
    </ul>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private List<SparePartTypeModel> _types { get; set; } = new List<SparePartTypeModel>();
    private List<RepairWorkshopModel> _rs { get; set; } = new List<RepairWorkshopModel>();
    private List<ClaimModel> _cm;

    protected override async Task OnInitializedAsync()
    {
        _types = (await Mediator.Send(new AllSparePartTypesQuery())).Output;
        _rs = (await Mediator.Send(new StoragePlacesForCurrentUserQuery())).Output; //(await Mediator.Send(new StoragePlacesByLocationQuery((await AuthenticationStateTask).LocationId()))).Output;

        _cm = await CurrentUserService.AllClaims();
        var ui = await CurrentUserService.IsInRole("Admin");
        var t = "";
        //var name = (await AuthenticationStateTask).Name();
        //var t = await Info.GetClaims(name);
        //var y = "";
    }

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        //ApplicationDbCtx = ContextFactory.CreateDbContext();

    }

    protected override void Dispose(bool disposing)
    {
        //ApplicationDbCtx.Dispose();
        base.Dispose(disposing);
    }
}
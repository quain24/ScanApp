@page "/spareparts"
@using ScanApp.Domain.Entities;
@using ScanApp.Components.Common.ScanAppTable
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.SpareParts
@using ScanApp.Application.SpareParts.Queries.AllSparePartTypes
@using ScanApp.Application.SpareParts.Commands.CreateSpareParts
@using ScanApp.Application.SpareParts.Queries.SparePartStoragePlacesForCurrentUser
@using ScanApp.Components.Common.ScanAppTable.Options
@using ScanApp.Models.SpareParts
@inject IArticleService articleService
@inject IScopedMediator mediator
@inject ISnackbar Snackbar
<style>
    .mud-input-label-inputcontrol {
        margin-left: 20px;
    }
</style>

<MudPaper Elevation="4">
    <MudGrid>
        <MudItem Style="position:center" xs="12" sm="6" md="4">
            <MudAutocomplete T="string" Label="Repair Workshop (LHM)" @bind-Value="_selectedRepairWorkshop" SearchFunc="@SearchRepairWorkshop" Required="true" CoerceText="true" ResetValueOnEmptyText="true"
                             Immediate="true" Style="margin-left: 15px; margin-right: 15px; max-width: 470px" Variant="Variant.Outlined" />

            <MudTextField @bind-Value="_article" Label="Article" Immediate="true"
                          Style="margin-left: 15px; margin-right: 15px; max-width: 470px;" Variant="Variant.Outlined" />
        </MudItem>
    </MudGrid>
</MudPaper>
&nbsp;
<ScanAppTable Items="@_spareParts" TableStyle="@_tableStyle" Options="@_tableOptions" Headers="@Headers"
              Height="@_height" DeleteData="@Delete" SaveChanges="@Save" GetData="@(async () => await GetData())" />
<MudDivider />
<MudButton Variant="Variant.Filled" OnClick="@Cancel" Style="float:left; width: 175px; margin-left: 10px; bottom: -15px; max-width: 48%;" StartIcon="@Icons.Material.Filled.Cancel"
           Color="Color.Error">Cancel</MudButton>
<MudButton Variant="Variant.Filled" OnClick="@Submit" Style="float:left; margin-left: 40px; width: 175px; bottom: -15px; max-width: 48%;" Size="Size.Medium"
           Color="Color.Primary">Submit</MudButton>

@code {
    private List<SparePartGUIModel> _spareParts;
    private List<SparePartGUIModel> _sparePartsEmpty;

    private string[] _headersArray =
    {
        "Name","Amount"
    };

    private Headers Headers { get; set; }
    private ScanAppTableOptions _tableOptions { get; set; }

    private List<RepairWorkshopModel> _repairWorkshopModels = new List<RepairWorkshopModel>();
    private string _height = "400px";
    private string _tableStyle = "max-width: 500px;";
    private string[] _repairWorkshops;
    private string _selectedRepairWorkshop;
    private string _article;

    protected override async Task OnInitializedAsync()
    {
        _tableOptions = new ScanAppTableOptions();
        //_tableOptions.ShowToolBar = false;
        var storagePlacesResult = await mediator.Send(new SparePartStoragePlacesForCurrentUserQuery());
        if (storagePlacesResult.Conclusion is false)
        {
            Snackbar.Add("Could not fetch possible repair workshops", Severity.Error);
            return;
        }
        _repairWorkshopModels = storagePlacesResult.Output;

        _repairWorkshops = new string[_repairWorkshopModels.Count];

        for (int i = 0; i < _repairWorkshopModels.Count; i++)
        {
            _repairWorkshops[i] = _repairWorkshopModels[i].Number;
        }

        await base.OnInitializedAsync();
    }

    private Task<IEnumerable<string>> SearchRepairWorkshop(string value)
    {
        return Task.FromResult(_repairWorkshops.AsEnumerable());
    }

    public void Save(SparePartGUIModel sparePart)
    {

    }

    public void Delete(IEnumerable<SparePartGUIModel> spareParts)
    {

    }

    public async Task GetData()
    {
        Headers = new Headers(_headersArray);
        Headers.MakeNotEditable("Name");

        // Call database to get data
        var sparePartsTypesResult = await mediator.Send(new AllSparePartTypesQuery());
        if (sparePartsTypesResult.Conclusion is false)
        {
            Snackbar.Add("Could not fetch spare part types.", Severity.Error);
            return;
        }

        _spareParts = sparePartsTypesResult.Output
            .Select(m => new SparePartGUIModel(m.Name))
            .ToList();

        _sparePartsEmpty = ClearSparePartList(_spareParts);

        StateHasChanged();
    }

    private async Task Cancel()
    {
        await Flush();
    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(_article))
        {
            Snackbar.Add("Article field is empty!", Severity.Error);
            return;
        }

        var parts = _spareParts
            .Where(s => s.Amount > 0)
            .Select(s => new SparePartModel(s.Name, s.Amount, _article, GetRepairWorkshopId(_selectedRepairWorkshop)))
            .ToArray();

        var saveResult = await mediator.Send(new CreateSparePartsCommand(parts));

        if (saveResult.Conclusion is false)
        {
            Snackbar.Add("Creation of spare parts has failed!");
            return;
        }

        Snackbar.Add(parts.Sum(p => p.Amount) + " new spare parts created!", Severity.Success);
        await Flush();
    }

    private async Task Flush()
    {
        _article = string.Empty;
        _selectedRepairWorkshop = string.Empty;
        _spareParts = null;
        _spareParts = ClearSparePartList(_sparePartsEmpty);
        StateHasChanged();
    }

    private List<SparePartGUIModel> ClearSparePartList(List<SparePartGUIModel> sparePartList)
    {

        return sparePartList.Select(s => new SparePartGUIModel(s.Name)).ToList();
    }

    private string GetRepairWorkshopId(string selectedWorkshop)
    {
        return _repairWorkshopModels.Where(s => s.Number == selectedWorkshop).Select(s => s.Id).ToArray().First();
    }
}
@page "/spareparts"
@using ScanApp.Components.Common.ScanAppTable
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.SpareParts
@using ScanApp.Application.SpareParts.Queries.AllSparePartTypes
@using ScanApp.Application.SpareParts.Queries.SparePartStoragePlacesForCurrentUser
@using ScanApp.Application.SpareParts.Commands.CreateSpareParts
@using ScanApp.Common
@using ScanApp.Components.Common.ScanAppTable.Options
@using ScanApp.Models.SpareParts
@using ScanApp.Common.Extensions
@using ScanApp.Common.Validators
@using Severity = MudBlazor.Severity
@using FluentValidation
@inject IArticleService articleService
@inject IScopedMediator mediator
@inject ISnackbar Snackbar
@inject ArticleNumberValidator ArticleNumberValidator
<style>
    .mud-input-label-inputcontrol {
        margin-left: 20px;
    }

    .mud-input-control-helper-container {
        margin-left: 20px;
    }
</style>

<MudPaper Elevation="4">
    <MudGrid>
        <MudItem Style="position: center" xs="12" sm="6" md="4">
            <MudForm @ref="_form" IsValidChanged="@OnValidationChanged">
                <MudAutocomplete T="string" Label="Repair Workshop (LHM)" @bind-Value="_selectedRepairWorkshop" Validation="@_lhmValidator.Validation"
                                 SearchFunc="@SearchRepairWorkshop" Required="true" CoerceText="true" ResetValueOnEmptyText="true"
                                 Immediate="true" Style="margin-left: 15px; margin-right: 15px; max-width: 470px" Variant="Variant.Outlined" />

                <MudTextField @bind-Value="_article" Validation="@_articleValidator" Label="Article" Immediate="true"
                              Style="margin-left: 15px; margin-right: 15px; max-width: 470px;" Variant="Variant.Outlined" val />
            </MudForm>
        </MudItem>
    </MudGrid>
</MudPaper>
&nbsp;
<ScanAppTable @bind-Items="@_spareParts" ValuesChanged="@OnItemsChanged" TableStyle="@_tableStyle" Options="@TableOptions" Headers="@Headers"
              Height="@_height" GetData="@(async () => await GetData())" />
<MudDivider />
<MudButton Variant="Variant.Filled" OnClick="@(async _ => await ResetForm(true))" Style="float:left; width: 175px; margin-left: 10px; bottom: -15px; max-width: 48%;" StartIcon="@Icons.Material.Filled.Cancel"
           Disabled="@(RequiredFieldsAreEmpty() && !IsAnyAmountOverZero())" Color="Color.Error">Cancel</MudButton>
<MudButton Variant="Variant.Filled" OnClick="@Submit" Style="float:left; margin-left: 40px; width: 175px; bottom: -15px; max-width: 48%;" Size="Size.Medium"
           Disabled="@_submitDisabled" Color="Color.Primary">Submit</MudButton>

@code {
    private List<SparePartGUIModel> _spareParts;
    private List<SparePartGUIModel> _sparePartsEmpty;
    private MudForm _form;
    private bool _submitDisabled = true;

    private string[] _headersArray =
{
        "Name","Amount"
    };

    private Headers Headers { get; set; }
    private ScanAppTableOptions TableOptions { get; set; } = new() { ShowToolBar = true, AllowGrouping = false};

    private List<RepairWorkshopModel> _repairWorkshopModels = new();
    private string _height = "400px";
    private string _tableStyle = "max-width: 500px;";
    private string[] _repairWorkshops;
    private string _selectedRepairWorkshop = string.Empty;
    private string _article = string.Empty;
    private bool _submitInProgress;

    private Func<string, IEnumerable<string>> _articleValidator;
    private FluentValidationWrapper<string> _lhmValidator;

    protected override async Task OnInitializedAsync()
    {
        SetUpValidators();
        await RetrieveRepairWorkshops();
    }

    private void SetUpValidators()
    {
        _articleValidator = ArticleNumberValidator.ToMudFormFieldValidator();
        _lhmValidator = new(x => x
            .Cascade(CascadeMode.Stop)
            .Must(r => _repairWorkshops?.Any(w => string.Equals(r, w, StringComparison.OrdinalIgnoreCase)) ?? false)
            .WithMessage("Only predefined repair workshops are allowed"), "Select one of workshops");
    }

    private async Task RetrieveRepairWorkshops()
    {
        var storagePlacesResult = await mediator.Send(new SparePartStoragePlacesForCurrentUserQuery());
        if (storagePlacesResult.Conclusion is false)
        {
            Snackbar.Add($"Could not fetch possible repair workshops\n{storagePlacesResult.ErrorDescription}", Severity.Error);
            return;
        }
        _repairWorkshopModels = storagePlacesResult.Output;
        _repairWorkshops = _repairWorkshopModels.Select(m => m.Number).ToArray();
    }

    private Task<IEnumerable<string>> SearchRepairWorkshop(string value) => Task.FromResult(_repairWorkshops.AsEnumerable());

    private async Task GetData()
    {
        Headers = new Headers(_headersArray);
        Headers.MakeNotEditable("Name");

        // Call database to get data
        var sparePartsTypesResult = await mediator.Send(new AllSparePartTypesQuery());
        if (sparePartsTypesResult.Conclusion is false)
        {
            Snackbar.Add("Could not fetch spare part types.", Severity.Error);
            return;
        }

        _spareParts = sparePartsTypesResult.Output
            .Select(m => new SparePartGUIModel(m.Name))
            .ToList();

        _sparePartsEmpty = ClearSparePartList(_spareParts);

        StateHasChanged();
    }

    private async Task Submit()
    {
        if (_submitInProgress)
            return;

        _submitInProgress = true;
        var parts = _spareParts
            .Where(s => s.Amount > 0)
            .Select(s => new SparePartModel(s.Name, s.Amount, _article, GetRepairWorkshopId(_selectedRepairWorkshop)))
            .ToArray();

        var createResult = await mediator.Send(new CreateSparePartsCommand(parts));

        if (createResult.Conclusion is false)
        {
            Snackbar.Add("Creation of spare parts has failed!");
            return;
        }

        Snackbar.Add($"{parts.Sum(p => p.Amount)} new spare parts created!", Severity.Success);
        await ResetForm(false);
        _submitInProgress = false;
    }

    private string GetRepairWorkshopId(string selectedWorkshop)
    {
        return _repairWorkshopModels
            .FirstOrDefault(s => s.Number.Equals(selectedWorkshop))
            ?.Id;
    }

    private Task ResetForm(bool flushLHM)
    {
        _article = string.Empty;
        if (flushLHM)
        {
            _selectedRepairWorkshop = string.Empty;
        }
        _spareParts = ClearSparePartList(_sparePartsEmpty);
        OnItemsChanged();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private List<SparePartGUIModel> ClearSparePartList(List<SparePartGUIModel> sparePartList)
    {

        return sparePartList
            .Select(s => new SparePartGUIModel(s.Name))
            .ToList();
    }

    private void OnItemsChanged() => OnValidationChanged(_form.IsValid);

    private void OnValidationChanged(bool valid)
    {
        if (RequiredFieldsAreEmpty() || IsAnyAmountOverZero() is false)
        {
            _submitDisabled = true;
            return;
        }
        _submitDisabled = !valid;
    }

    private bool RequiredFieldsAreEmpty() => string.IsNullOrWhiteSpace(_article) && string.IsNullOrWhiteSpace(_selectedRepairWorkshop);

    private bool IsAnyAmountOverZero() => _spareParts?.Any(s => s.Amount > 0) ?? false;
}
@page "/counter"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using ScanApp.Application.Common.Entities
@using ScanApp.Infrastructure.Persistence
@using System.Net
@using ScanApp.Application.Common.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject IApplicationDbContext AppDbContext

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<AuthorizeView Roles="admin">
    <Authorized>
        <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-primary" @onclick="IncrementCount">Not auth click</button>
    </NotAuthorized>
</AuthorizeView>
@name
<AuthorizeView Roles="new_role">
    <Authorized>
        <button class="btn btn-primary" @onclick="IncrementCount">Authorized</button>
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-primary" @onclick="AddRole">Not Authorized</button>
    </NotAuthorized>
</AuthorizeView>
@foreach (var usr in users)
{
    <tr>
        <td>@usr</td>
    </tr>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int currentCount = 0;
    private string name;
    private List<string> users = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        users = await GetUsers();
    }

    private async Task<List<string>> GetUsers()
    {
        var users = await AppDbContext.Users.ToListAsync();
        await AppDbContext.SaveChangesAsync();
        List<string> a = new List<string>();

        foreach (var applicationUser in users)
        {
            a.Add(applicationUser.UserName);
            await Task.Delay(250);
        }
        return a;
    }

    private async Task<string> GetName()
    {
        var t = await authenticationStateTask;
        return t.User.Identity.Name;
    }

    protected override async Task OnParametersSetAsync()
    {
        name = await GetName();
    }

    private void IncrementCount()
    {
        currentCount++;
        name = name + "A";
    }

    private async Task AddRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var currentUser = await userManager.GetUserAsync(user);
        var role = await roleManager.CreateAsync(new IdentityRole()
        {
            Name = "new_role"
        });

        var t = await userManager.AddToRoleAsync(currentUser, "new_role");
    }
}
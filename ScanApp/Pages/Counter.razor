@attribute [Authorize]
@page "/counter"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using ScanApp.Infrastructure.Persistence
@using ScanApp.Application.Admin.Queries.GetAllUsers
@using ScanApp.Application.Admin.Commands.AddNewUserRole
@using ScanApp.Application.Common.Entities
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Infrastructure.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> AppDbContextFactory
@inject IScopedMediator Mediator

@inherits OwningComponentBase

<h1>Counter</h1>

<p>Current count: @_currentCount</p>

<AuthorizeView Roles="admin">
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="IncrementCount">Authorized click</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="IncrementCount">Unauthorized click</MudButton>
    </NotAuthorized>
</AuthorizeView>
@_name
<AuthorizeView Roles="new_role">
    <Authorized>
        <button class="btn btn-primary" @onclick="IncrementCount" onmouseover="null">Authorized</button>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@_userAuthenticated
@foreach (var usr in _users)
{
    <tr>
        <td>@usr</td>
    </tr>
}

@foreach (var usr in _claims)
{
    <tr>
        <td>@usr</td>
    </tr>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private int _currentCount = 0;
    private string _name;
    private List<string> _users = new List<string>();
    private List<string> _claims = new List<string>();
    string _userAuthenticated;
    bool _mayRender = false;
    UserManager<ApplicationUser> userManager;
    RoleManager<IdentityRole> roleManager;

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        userManager = (UserManager<ApplicationUser>)ScopedServices.GetService(typeof(UserManager<ApplicationUser>));
        roleManager = (RoleManager<IdentityRole>)ScopedServices.GetService(typeof(RoleManager<IdentityRole>));
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Uclaim();
    }

    public async Task Uclaim()
    {
        var t = await AuthenticationStateTask;
        var a = t.User.Claims;
        _claims.AddRange(a.Select(y => $"{y.Type} | {y.Value}"));
    }

    public async Task TestLogoff()
    {
        _mayRender = true;
        await using (var context = AppDbContextFactory.CreateDbContext())
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var mod = await context.Users.FirstAsync(u => u.UserName == "test");
            var u = Mediator.Send(new AddNewUserRoleCommand("&* ll"));
            mod.SecurityStamp = Guid.NewGuid().ToString();
            await context.SaveChangesAsync();
        }
        _mayRender = false;
    }

    private async Task<List<string>> GetUsers()
    {
        var result = await Mediator.SendScoped(new GetAllUsersQuery());

        if (result.Conclusion)
        {
            return result.Output.Select(u => u.UserName).ToList();
        }

        return new List<string>(0);
    }

    private async Task<string> GetName()
    {
        var t = await AuthenticationStateTask;
        return t.User.Identity.Name;
    }

    protected override async Task OnParametersSetAsync()
    {
        _name = await GetName();

        _users = await GetUsers();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userAuthenticated = user.Identity.IsAuthenticated ? $"{ user.Identity.Name} is authenticated." : "The user is NOT authenticated.";
    }

    private void IncrementCount()
    {
        _currentCount++;
        _name += "A";
    }
}
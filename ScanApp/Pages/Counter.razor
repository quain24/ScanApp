@*@attribute [Authorize(Policy = nameof(Policies.LocationMustBePoznan))]*@
@page "/counter"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using ScanApp.Infrastructure.Persistence
@using ScanApp.Application.Admin.Queries.GetAllUsers
@using ScanApp.Application.Admin.Commands.AddNewUserRole
@using ScanApp.Application.Common.Entities
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Infrastructure.Identity
@using System.Diagnostics
@using System.Threading
@using ScanApp.Application.SpareParts.Queries.AllSparePartTypes
@using ScanApp.Domain.Entities
@using Version = ScanApp.Domain.ValueObjects.Version
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IScopedMediator Mediator
@inject IUserInfo UserInfo
@inject IUserManager Manager
@inject ILocationManager LocationManagerService

@inherits OwningComponentBase

<h1>Counter</h1>

<p>Current count: @_currentCount</p>

<AuthorizeView Roles="Admin">
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="IncrementCount">Authorized click</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="IncrementCount">Unauthorized click</MudButton>
    </NotAuthorized>
</AuthorizeView>
@_name
<AuthorizeView Roles="new_role">
    <Authorized>
        <button class="btn btn-primary" @onclick="IncrementCount" onmouseover="null">Authorized</button>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@_userAuthenticated
@foreach (var usr in _users)
{
    <tr>
        <td>@usr</td>
    </tr>
}

@foreach (var usr in _claims)
{
    <tr>
        <td>@usr</td>
    </tr>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private int _currentCount = 0;
    private string _name;
    private List<string> _users = new List<string>();
    private List<string> _claims = new List<string>();
    string _userAuthenticated;

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //var x = await LocationManagerService.RemoveLocation(new Location("1", "Poznań"));
            var t = await LocationManagerService.GetLocationByName("Poznań");

            var h = await Manager.SetUserLocation("testaaasd", new Location("123", "newnew"), Version.Create("d1dab7ec-bebd-45fb-878e-98f35fd1f198"));
            var u = "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Uclaim();
        var u = "";
        //await LocationManagerService.RemoveLocation(new Location("1", "Poznań"));
        //await LocationManagerService.AddNewLocation("Genewa");

        var token = new CancellationTokenSource(5).Token;
        var t = await Mediator.Send(new AllSparePartTypesQuery(), token);
        var s = "";
    }

    public async Task Uclaim()
    {
        var stop = new Stopwatch();
        stop.Start();
        var t = await AuthenticationStateTask;
        Console.WriteLine(stop.Elapsed);
        Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        Console.WriteLine(t.User.HasClaim("Test", "1111"));
        Console.WriteLine(stop.Elapsed);
        Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

        var b = t.User.Claims.ToList();
        //var a = await UserInfo.GetAllClaims(t.User.Identity.Name);
        Console.WriteLine(stop.Elapsed);
        Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        if (true)//a.Conclusion)
        {
            _claims = b.Select(i => $"{i.Type} |1| {i.Value}").ToList();
        }
        Console.WriteLine(stop.Elapsed);
        Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

        //var a = await UserInfo.GetAllClaims("Test");

        //_claims = a.Output.Select(c => $"{c.Type} || {c.Value}").ToList();

    }

    private async Task<List<string>> GetUsers()
    {
        var result = await Mediator.SendScoped(new GetAllUsersQuery());

        if (result.Conclusion)
        {
            return result.Output.Select(u => u.UserName).ToList();
        }

        return new List<string>(0);
    }

    private async Task<string> GetName()
    {
        var t = await AuthenticationStateTask;
        return t.User.Identity.Name;
    }

    protected override async Task OnParametersSetAsync()
    {
        //_name = await GetName();

        //_users = await GetUsers();
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState.User;
        //_userAuthenticated = user.Identity.IsAuthenticated ? $"{ user.Identity.Name} is authenticated." : "The user is NOT authenticated.";
    }

    private void IncrementCount()
    {
        _currentCount++;
        _name += "A";
    }
}
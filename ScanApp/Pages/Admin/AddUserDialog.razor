@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Application.Admin.Commands.AddUser
@using ScanApp.Domain.Entities
@inject Application.Common.Interfaces.IScopedMediator Mediator
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <UserDataForm @ref="_form" @bind-Success="_success" @bind-User="User" @bind-Password="_password" Locations="Locations" EditingDisabled="false" />
    </DialogContent>
    <DialogActions>
        <MudButton Class="ml-auto" Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Class="mr-auto" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_success" OnClick="Submit">Add user</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public List<Location> Locations { get; set; }

    private UserDataForm _form;
    private string _password;

    // 'true' enables submit button on start
    private bool _success = true;
    UserInfoModel User { get; set; }

    async Task Submit()
    {
        _form.Validate();
        if (_success is false)
            return;

        var userDto = new AddUserDto()
        {
            Name = User.Name,
            Email = User.Email,
            Phone = User.Phone,
            Password = _password,
            Location = User.Location
        };

        var result = await Mediator.SendScoped(new AddUserCommand(userDto));

        if (result.Conclusion)
        {
            Snackbar.Add($"User {userDto.Name} has been added to database", Severity.Success);
            MudDialog.Close(DialogResult.Ok(result.Output));
            return;
        }

        Snackbar.Add(result.ErrorDescription?.ToString(), Severity.Error);
    }

    void Cancel() => MudDialog.Cancel();
}
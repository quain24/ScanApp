@using ScanApp.Application.Admin.Queries.GetAllUserData
@using ScanApp.Common
@using ScanApp.Common.Validators
@using FluentValidation
@using ScanApp.Application.Common.Validators
@using ScanApp.Common.Extensions
@using ScanApp.Domain.Entities
@using InputType = MudBlazor.InputType
@inject PasswordValidator PasswordValidator

<MudForm @ref="@_form" IsValidChanged="@(async valid => await SuccessChanged.InvokeAsync(valid))" IsValid="@Success">
    <MudTextField @bind-Value="User.Name" TextChanged="@OnUserChanged" Validation="@_nameValidator.Validation"
                   Variant="Variant.Filled" Label="Name" Disabled="EditingDisabled" Immediate="true" FullWidth="true"/>
    @if (DisablePassword is false)
    {
        <MudTextFieldString @bind-Value="Password" TextChanged="@OnUserChanged" Validation="@_passwordValidator" InputType="InputType.Password" Variant="Variant.Filled"
                             Immediate="true" Label="Password" FullWidth="true"/>
    }
    <MudTextField @bind-Value="User.Email" TextChanged="@OnUserChanged" Validation="@_emailValidator.Validation" Variant="Variant.Filled"
                   Label="Email" Disabled="EditingDisabled" Immediate="true" FullWidth="true"/>

    <MudSelect AutoFocus="true" T="Location" Label="Location" Dense="true" OffsetY="true" ToStringFunc="@_selectConverter"@bind-Value="User.Location" SelectedValuesChanged="@OnUserChanged" Variant="Variant.Filled" Disabled="EditingDisabled" FullWidth="true">
        <MudSelectItem T="Location" Value="null" />
        @foreach (var location in Locations)
        {
            <MudSelectItem T="Location" Value="location" />
        }
    </MudSelect>
    <MudTextField @bind-Value="User.Phone" TextChanged="@OnUserChanged" Validation="@_phoneValidator.Validation" Variant="Variant.Filled" Label="Phone number" Disabled="EditingDisabled" Immediate="true" FullWidth="true"/>
</MudForm>

@code {

    protected override void OnInitialized()
    {
        if (!DisablePassword)
            _passwordValidator = PasswordValidator.ToAsyncMudFormFieldValidator();
    }

    protected override void OnParametersSet()
    {
        if (EditingDisabled is true)
            _form?.ResetValidation();

        User ??= new UserInfoModel()
        {
            Email = string.Empty,
            Name = string.Empty,
            Phone = string.Empty
        };

        if (!User?.EqualWithDate(_localUserCopy) ?? false)
            _localUserCopy = new UserInfoModel(User);
        if (!Password?.Equals(_localPasswordCopy) ?? false)
            _localPasswordCopy = Password;
    }

    [Parameter]
    public List<Location> Locations { get; set; } = new();

    [Parameter]
    public bool Success { get; set; }
    [Parameter]
    public EventCallback<bool> SuccessChanged { get; set; }

    [Parameter]
    public UserInfoModel User { get; set; }
    [Parameter]
    public EventCallback<UserInfoModel> UserChanged { get; set; }
    private UserInfoModel _localUserCopy;

    [Parameter]
    public string Password { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }
    [Parameter]
    public bool DisablePassword { get; set; }
    private string _localPasswordCopy;

    [Parameter]
    public bool EditingDisabled { get; set; }

    private MudForm _form;

    private Func<string, Task<IEnumerable<string>>> _passwordValidator;

    Func<Location, string> _selectConverter = l => l?.Name ?? "None";

    private readonly FluentValidationWrapper<string> _nameValidator = new(x => x
        .SetValidator(new IdentityNamingValidator<string, string>())
        .WithMessage("Name contain illegal chars or has length less than 3 or more than 60"));

    private readonly FluentValidationWrapper<string> _emailValidator = new(x => x
        .Cascade(CascadeMode.Stop)
        .NotEmpty().WithMessage("Email cannot be empty")
        .SetValidator(new EmailValidator<string, string>()));

    private readonly FluentValidationWrapper<string> _locationValidator = new(x => x
        .SetValidator(new MustContainOnlyLettersOrAllowedSymbolsValidator<string, string>())
        .WithMessage("Location contains illegal chars or is empty"));

    private readonly FluentValidationWrapper<string> _phoneValidator = new(x => x
        .SetValidator(new PhoneNumberValidator<string, string>())
        .When(s => !string.IsNullOrEmpty(s))
        .WithMessage("Not a valid phone number"));

    public void Validate() => _form.Validate();

    private async Task OnUserChanged()
    {
        if (_localUserCopy.EqualWithDate(User) && string.Equals(_localPasswordCopy, Password))
            return;
        await PasswordChanged.InvokeAsync(Password);
        await UserChanged.InvokeAsync(User);
    }

}
@using ScanApp.Application.Common.Interfaces
@using ScanApp.Application.Common.Helpers.Result
@using ScanApp.Application.Admin.Commands.AddClaimToRole
@using ScanApp.Application.Admin.Commands.RemoveClaimFromRole
@using ScanApp.Application.Admin.Queries.GetAllClaimsFromRole
@using ScanApp.Application.Admin
@using ScanApp.Application.Admin.Commands.DeleteRole
@using ScanApp.Application.Admin.Queries.GetAllClaims
@inject IScopedMediator Mediator
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12" lg="6" Class="px-1">
        <MudTable RowStyleFunc="RowStyleFunc" Breakpoint="Breakpoint.None" T="BasicRoleModel" Items="@Roles" @bind-SelectedItem="_selectedRole" RowsPerPage="5"
                  Filter="new Func<BasicRoleModel, bool>(FilterRoles)" OnRowClick="@FillSelectedRoleClaimsData" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Roles</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="_searchStringRole" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="height: 51px;">@context.Name</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" lg="6" Class="px-1">
        <MudTable Breakpoint="Breakpoint.None" Items="@_roleClaims" @bind-SelectedItem="_selectedClaim" RowsPerPage="5"
                  Filter="new Func<(ClaimModel Claim, bool IsInClaim), bool>(FilterClaims)" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Claims</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="_searchStringClaim" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Claim Type</MudTh>
                <MudTh>Claim Value</MudTh>
                <MudTh>Active</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Item1.Type</MudTd>
                <MudTd>@context.Item1.Value</MudTd>
                <MudTd><MudSwitch T="bool" CheckedChanged="@(async arg => await Switch(arg))" Checked="@context.IsInClaim" Color="Color.Primary"></MudSwitch></MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" Class="px-1">
        <MudButton Class="ml-auto" OnClick="@AddNewRole" Color="Color.Info" Variant="Variant.Filled">Add new role</MudButton>
        <MudButton Class="ml-2" OnClick="@DeleteRole" Color="Color.Warning" Variant="Variant.Filled">Delete selected role</MudButton>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public List<BasicRoleModel> Roles { get; set; }

    [Parameter]
    public EventCallback RolesChanged { get; set; }

    [Parameter]
    public string SelectedRowStyle { get; set; }

    private BasicRoleModel _selectedRole;
    private (ClaimModel Claim, bool IsInClaim) _selectedClaim;
    private List<(ClaimModel, bool IsInClaim)> _roleClaims = new();
    private List<ClaimModel> _claims = new();
    private string _lastCheckedRole;
    private string _searchStringRole;
    private string _searchStringClaim;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RetrieveAllClaims();
    }

    private async Task AddNewRole()
    {
        var dialog = DialogService.Show<AddNewRoleDialog>("Add new role", new DialogParameters
        {
            ["Roles"] = Roles
        }, new DialogOptions { DisableBackdropClick = true, FullWidth = true });

        if ((await dialog.Result).Cancelled)
            return;

        await RolesChanged.InvokeAsync();
        _roleClaims = new List<(ClaimModel, bool IsInClaim)>();
        StateHasChanged();
    }

    private async Task DeleteRole()
    {
        var answer = await DialogService.ShowMessageBox(
            "Confirm deletion",
            $"Are you sure you want to delete {_selectedRole.Name} role?",
            "Delete", null, "Cancel", Globals.Gui.DefaultDialogOptions);

        if (!answer ?? true)
            return;

        var result = await Mediator.SendScoped(new DeleteRoleCommand(_selectedRole.Name));

        if (result.Conclusion is false)
        {
            Snackbar.Add(result.ErrorDescription?.ToString(), Severity.Error);
            return;
        }

        _selectedRole = null;
        _roleClaims = new();
        await InvokeAsync(StateHasChanged);
        await RolesChanged.InvokeAsync();
    }

    private async Task RetrieveAllClaims()
    {
        var roleResult = await Mediator.SendScoped(new GetAllClaimsQuery());

        if (roleResult.Conclusion is false)
        {
            Snackbar.Add(roleResult.ErrorDescription?.ToString(), Severity.Error);
            return;
        }

        _claims = roleResult.Output;
    }

    private async Task Switch(bool arg)
    {
        Result result;
        string message;
        if (_selectedRole is null)
            return;

        if (_selectedClaim.IsInClaim)
        {
            result = await Mediator.SendScoped(new RemoveClaimFromRoleCommand(_selectedClaim.Claim, _selectedRole.Name));
            message = $"Claim {_selectedClaim.Claim.Type} with value of {_selectedClaim.Claim.Value} removed from {_selectedRole.Name}";
        }
        else
        {
            result = await Mediator.SendScoped(new AddClaimToRoleCommand(_selectedRole.Name, _selectedClaim.Claim));
            message = $"Claim {_selectedClaim.Claim.Type} with value of {_selectedClaim.Claim.Value} added to {_selectedRole.Name}";
        }

        if (result.Conclusion is false)
        {
            Snackbar.Add(result.ErrorDescription?.ToString(), Severity.Error);
            return;
        }

        var index = _roleClaims.FindIndex(c => c.Equals(_selectedClaim));
        _roleClaims[index] = (_selectedClaim.Claim, !_selectedClaim.IsInClaim);

        StateHasChanged();
        Snackbar.Add(message, Severity.Success);
    }

    private async void FillSelectedRoleClaimsData(TableRowClickEventArgs<BasicRoleModel> args)
    {
        if (args.Item.Name.Equals(_lastCheckedRole))
            return;

        var res = await Mediator.SendScoped(new GetAllClaimsFromRoleQuery(args.Item.Name));

        if (res.Conclusion is false)
        {
            Snackbar.Add(res.ErrorDescription?.ToString(), Severity.Error);
            return;
        }

        _lastCheckedRole = args.Item.Name;
        _roleClaims = _claims.Select(r =>
        {
            var IsActive = res.Output.Contains(r);
            return (r, IsActive);
        }).ToList();

        StateHasChanged();
    }

    private bool FilterClaims((ClaimModel Claim, bool IsInClaim) data)
    {
        if (string.IsNullOrEmpty(_searchStringClaim))
            return true;
        return (data.Claim.Type?.Contains(_searchStringClaim, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (data.Claim.Value?.Contains(_searchStringClaim, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private bool FilterRoles(BasicRoleModel roleName)
    {
        if (string.IsNullOrWhiteSpace(_searchStringRole))
            return true;
        return roleName?.Name.Contains(_searchStringRole, StringComparison.OrdinalIgnoreCase) ?? false;
    }

    private string RowStyleFunc(BasicRoleModel rowValue, int rowNumber)
    {
        return rowValue?.Name?.Equals(_selectedRole?.Name) ?? false
            ? SelectedRowStyle ?? string.Empty
            : string.Empty;
    }
}
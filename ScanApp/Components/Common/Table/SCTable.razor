@using System.Globalization
@using ScanApp.Common.Helpers
@using ScanApp.Components.Common.Table.Dialogs
@using ScanApp.Components.Common.Table.Enums
@using ScanApp.Components.Common.Table.Utilities
@using SharedExtensions
@inject IDialogService _dialogService
@typeparam TTableType

@if (GroupedData?.Count > 0)
{
    <MudTable Items="GroupedData" T="KeyValuePair<string, List<TTableType>>" OnRowClick="OnGroupClick"
              FixedHeader="FixedHeader" FixedFooter="FixedFooter" Height="@CalculateHeight()" RowsPerPage="RowsPerPage"
              Class="m-0 p-0" Elevation="0" Bordered="false" Striped="true" Hover="true" Outlined="false" Dense="true" Breakpoint="Breakpoint.None">
        <ToolBarContent>
            @if (Configs?.Count > 0 && _groupables.Count > 0)
            {
                <TableToolbar T="TTableType" Groupables="_groupables" SelectedGroupableChanged="@(s => CreateGroupsBasedOn(s))" SelectedGroupable="SelectedGroupable"
                              OnEditClick="@OpenEditItemDialog" OnFilterClick="@OpenFilterItemDialog" EditVisible="@_editingEnabled" EditDisabled="@(SelectedItem is null && SelectedItems.IsNullOrEmpty())"
                              FilterVisible="@_filteringEnabled" GroupingVisible="@_groupingEnabled" FiltersApplied="@(_filters?.Any() ?? false)"
                              OnRemoveFilterClick="RemoveFilters"></TableToolbar>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="padding: 10px; z-index: 10">
                Grouped by: @SelectedGroupable.DisplayName
            </MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="@context.Key">@context.Key</MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (_selectedGroupId == context.Key)
            {
                <MudTable Items="@FilterDataSource(context.Value)" T="TTableType" @bind-SelectedItem="@SelectedItemBoundChild" @bind-SelectedItems="@SelectedItemsBoundChild"
                          RowStyleFunc="SelectedRowStyleFunc" MultiSelection="MultiSelection" FixedHeader="true" FixedFooter="true" Height="@CalculateHeight(context.Value?.Count ?? 0, true)"
                          RowsPerPage="RowsPerPage" Class="m-0 p-0" Elevation="0" Striped="false" Bordered="false" Hover="true" Outlined="true" Dense="true" Breakpoint="Breakpoint.None">
                    <HeaderContent>
                        @foreach (var cfg in Configs)
                        {
                            <MudTh Style="border: thin solid darkgray; padding: 2px 10px 2px 10px;">
                                <MudTableSortLabel T="TTableType" Style="font-size: smaller" SortLabel="@cfg.Identifier.ToString()" SortBy="@ChooseSortingAlgorithm(cfg)">
                                    @cfg.DisplayName
                                </MudTableSortLabel>
                            </MudTh>
                        }
                    </HeaderContent>

                    <RowTemplate Context="rowData">
                        @foreach (var cfg in Configs)
                        {
                            <MudTd @key="@(cfg.Identifier.ToString() + rowData.GetHashCode())" Style="font-size: smaller; padding: 10px" DataLabel="@cfg.DisplayName">@FormatOutput(cfg, rowData)</MudTd>
                        }
                    </RowTemplate>
                    <PagerContent>
                        @if (context.Value.Count > RowsPerPage)
                        {
                            <MudTablePager PageSizeOptions="PageSizeOptions" />
                        }
                    </PagerContent>
                </MudTable>
            }
        </ChildRowContent>

        <PagerContent>
            @if (GroupedData.Count > RowsPerPage)
            {
                <MudTablePager PageSizeOptions="PageSizeOptions" />
            }
        </PagerContent>
    </MudTable>
}
else
{
    <MudTable Items="FilterDataSource(Data)" T="TTableType" @bind-SelectedItem="@SelectedItemBoundChild" @bind-SelectedItems="@SelectedItemsBoundChild"
              RowStyleFunc="SelectedRowStyleFunc" MultiSelection="MultiSelection" FixedHeader="FixedHeader" Height="@CalculateHeight()" OnRowClick="@(async args => await OnRowClick(args))"
              RowsPerPage="@RowsPerPage" Class="m-0 p-0" Elevation="0" Bordered="false" Striped="true"
              Hover="true" Outlined="false" Dense="true" Breakpoint="Breakpoint.None">
        <ToolBarContent>
            @if (Configs?.Count > 0 && _groupables.Count > 0)
            {
                <TableToolbar T="TTableType" Groupables="_groupables" SelectedGroupableChanged="@(s => CreateGroupsBasedOn(s))" SelectedGroupable="SelectedGroupable"
                              OnEditClick="@OpenEditItemDialog" OnFilterClick="@OpenFilterItemDialog" EditVisible="@_editingEnabled" EditDisabled="@(SelectedItem is null && SelectedItems.IsNullOrEmpty())"
                              FilterVisible="@_filteringEnabled" GroupingVisible="@_groupingEnabled" FiltersApplied="@(_filters?.Any() ?? false)"
                              OnRemoveFilterClick="RemoveFilters"></TableToolbar>
            }
        </ToolBarContent>
        <HeaderContent>
            @foreach (var cfg in Configs)
            {
                <MudTh Style="padding: 10px;">
                    <MudTableSortLabel T="TTableType" Style="font-size: smaller" SortLabel="@cfg.Identifier.ToString()" SortBy="@(ChooseSortingAlgorithm(cfg))">
                        @cfg.DisplayName
                    </MudTableSortLabel>
                </MudTh>
            }
        </HeaderContent>

        <RowTemplate>
            @foreach (var cfg in Configs)
            {
                <MudTd @key="@(cfg.Identifier.ToString() + context.GetHashCode())" Style="font-size: smaller; padding: 10px" DataLabel="@cfg.DisplayName">@(FormatOutput(cfg, context))</MudTd>
            }
        </RowTemplate>

        <PagerContent>
            @if (Data?.Count > RowsPerPage)
            {
                <MudTablePager PageSizeOptions="PageSizeOptions" />
            }
        </PagerContent>
    </MudTable>
}

@code
{
    [Parameter] public bool FixedHeader { get; set; }

    [Parameter] public bool FixedFooter { get; set; }

    [Parameter] public int MaxTableHeight { get; set; }

    [Parameter] public int RowsPerPage { get; set; } = 50;

    [Parameter] public int[] PageSizeOptions { get; set; } = { 10, 25, 50, 100, 250 };

    [Parameter] public bool EditOnRowClick { get; set; }

    [Parameter] public List<TTableType> Data { get; set; }

    [Parameter] public TTableType SelectedItem { get; set; }

    [Parameter] public EventCallback<TTableType> SelectedItemChanged { get; set; }

    private TTableType SelectedItemBoundChild
    {
        get => SelectedItem;
        set => SelectedItemChanged.InvokeAsync(value);
    }

    [Parameter] public bool MultiSelection { get; set; }

    [Parameter] public HashSet<TTableType> SelectedItems { get; set; }

    [Parameter] public EventCallback<HashSet<TTableType>> SelectedItemsChanged { get; set; }

    private HashSet<TTableType> SelectedItemsBoundChild
    {
        get => SelectedItems;
        set
        {
            SelectedItems = value;
            SelectedItemsChanged.InvokeAsync(value);
            
        }
    }

    [Parameter] public List<ColumnConfig<TTableType>> Configs { get; set; }
    [Parameter] public Show ShowEditButton { get; set; } = Show.Auto;
    [Parameter] public Show ShowFilterButton { get; set; } = Show.Auto;
    [Parameter] public Show ShowGroupsField { get; set; } = Show.Auto;
    [Parameter] public bool EditDialogStartsExpanded { get; set; } = true;
    [Parameter] public bool FilterDialogStartsExpanded { get; set; }
    [Parameter] public bool EditDialogInvalidFieldsStartExpanded { get; set; } = true;

    private ColumnConfig<TTableType> SelectedGroupable { get; set; }

    private string _selectedGroupId;
    private bool _groupingEnabled;
    private bool _filteringEnabled;
    private bool _editingEnabled;
    private SortedDictionary<string, List<TTableType>> GroupedData { get; set; } = new(new WordAndNumberStringComparer());
    private KeyValuePair<string, List<TTableType>> SelectedGroup { get; set; }
    private readonly HashSet<ColumnConfig<TTableType>> _comparables = new();
    private readonly HashSet<ColumnConfig<TTableType>> _groupables = new();
    private readonly List<IFilter<TTableType>> _filters = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AssignColumnsByProperties();
        EnableAvailableFunctionality();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CreateGroupsBasedOn(SelectedGroupable);
    }

    private void AssignColumnsByProperties()
    {
        foreach (var config in Configs)
        {
            if (CanBeComparedDirectly(config))
                _comparables.Add(config);

            if (config.IsGroupable)
                _groupables.Add(config);
        }
    }

    private void EnableAvailableFunctionality()
    {
        _filteringEnabled = (Configs?.Any(c => c.IsFilterable) ?? false)
                            && (ShowFilterButton is Show.Auto) || ShowFilterButton is Show.Yes;
        _groupingEnabled = (Configs?.Any(c => c.IsGroupable) ?? false)
                           && (ShowGroupsField is Show.Auto) || ShowGroupsField is Show.Yes;
        _editingEnabled = (Configs?.Any(c => c.IsEditable) ?? false)
                          && (ShowEditButton is Show.Auto) || ShowEditButton is Show.Yes;
    }

    private static bool CanBeComparedDirectly(ColumnConfig<TTableType> config)
    {
        var interfaces = config.PropertyType.GetInterfaces();
        return interfaces.Any(i => i == typeof(IComparable) || i == typeof(IComparable<>).MakeGenericType(config.PropertyType));
    }

    private void CreateGroupsBasedOn(ColumnConfig<TTableType> selectedColumn)
    {
        SelectedGroupable = selectedColumn;

        if (selectedColumn is null || Data is null || Data.Count <= 1)
        {
            GroupedData.Clear();
            return;
        }

        // Must be done without deleting groups collections.
        // Otherwise will cause sub-table to scroll up after row click or edit.
        foreach (var group in GroupedData.Values)
        {
            group.Clear();
        }

        foreach (var item in FilterDataSource(Data))
        {

            string key = selectedColumn.GetValueFrom(item)?.ToString() ?? "No value";
            if (GroupedData.TryGetValue(key, out var collection))
                collection.Add(item);
            else
                GroupedData.Add(key, new List<TTableType> { item });
        }

        var emptyKeys = GroupedData.Where(d => d.Value.Count == 0)
            .Select(d => d.Key)
            .ToList();
        emptyKeys.ForEach(k => GroupedData.Remove(k));
    }

    private IEnumerable<TTableType> FilterDataSource(IEnumerable<TTableType> data)
    {
        return _filters.Count == 0
            ? data
            : data.Filter(_filters);
    }

    private static dynamic FormatOutput(ColumnConfig<TTableType> config, TTableType context)
    {
        var value = config.GetValueFrom(context);

        if (config.Converter is not null)
            return config.Converter.SetFunc(value);

        if (value is DateTime or DateTimeOffset)
        {
            return config.FieldType switch
            {
                FieldType.AutoDetect => value,
                FieldType.Date => value.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern),
                FieldType.Time => value.ToString("t", CultureInfo.CurrentCulture),
                FieldType.DateAndTime => value.ToString("G", CultureInfo.CurrentCulture),
                FieldType.PlainText => value.ToString(),
                _ => throw new ArgumentOutOfRangeException($"Unknown value of {nameof(FieldType)} was used.")
            };
        }

        return value ?? string.Empty;
    }

    private void OnGroupClick(TableRowClickEventArgs<KeyValuePair<string, List<TTableType>>> args)
    {
        _selectedGroupId = _selectedGroupId == args.Item.Key ? null : args.Item.Key;
    }

    private async Task OnRowClick(TableRowClickEventArgs<TTableType> args)
    {
        if (EditOnRowClick)
        {
            SelectedItem = args.Item;
            await OpenEditItemDialog();
        }
    }

    public async Task OpenEditItemDialog()
    {
        var dialog = _dialogService.Show<EditDialog<TTableType>>("Edit item",
            new DialogParameters
            {
                ["Configs"] = Configs,
                ["SourceItem"] = SelectedItem,
                ["StartExpanded"] = EditDialogStartsExpanded,
                ["ExpandInvalidPanelsOnStart"] = EditDialogInvalidFieldsStartExpanded
            },
            Globals.Gui.DefaultDialogOptions);

        var result = await dialog.Result;
        if (result.Cancelled)
            return;
        var data = (TTableType)result.Data;
        await EditItem(data);
    }

    private Task EditItem(TTableType editedItem)
    {
        var oldItemIndex = Data.FindIndex(tt => tt.Equals(SelectedItem));
        if (oldItemIndex == -1)
            return Task.CompletedTask;
        Data[oldItemIndex] = editedItem;
        return SelectedItemChanged.InvokeAsync(editedItem);
    }

    public async Task OpenFilterItemDialog()
    {
        var dialog = _dialogService.Show<FilterDialog<TTableType>>("Filter by...",
            new DialogParameters
            {
                ["Configs"] = Configs,
                ["StartExpanded"] = FilterDialogStartsExpanded
            },
            Globals.Gui.DefaultDialogOptions);

        var result = await dialog.Result;
        if (result.Cancelled)
            return;
        _filters.AddRange(result.Data as IEnumerable<IFilter<TTableType>> ?? Enumerable.Empty<IFilter<TTableType>>());
        CreateGroupsBasedOn(SelectedGroupable);
    }

    private void RemoveFilters()
    {
        _filters.Clear();
        CreateGroupsBasedOn(SelectedGroupable);
    }

    private Func<TTableType, dynamic> ChooseSortingAlgorithm(ColumnConfig<TTableType> config)
    {
        return _comparables.Contains(config)
            ? new Func<TTableType, dynamic>(config.GetValueFrom)
            : item => config.GetValueFrom(item)?.ToString();
    }

    private string CalculateHeight(int rows = 0, bool isNested = false)
    {
        // No height set
        if (MaxTableHeight < 1)
            return null;

        // non-nested table is either unlimited or always set to given MaxHeight
        if (isNested is false)
            return MaxTableHeight < 1 ? null : MaxTableHeight + "px";

        // rows in group * row height + header height and some
        var theoreticalSize = (rows * 38) + 120;

        // 70% for nested table, so user can grab below nested table and drag to other groupings
        return (theoreticalSize > MaxTableHeight * 0.7 ? MaxTableHeight * 0.7 : theoreticalSize) + "px";
    }

    private string SelectedRowStyleFunc(TTableType rowValue, int rowNumber)
    {
        return MultiSelection switch
        {
            true => SelectedItems?.Contains(rowValue) ?? false,
            false => SelectedItem?.Equals(rowValue) ?? false

        } ? Globals.Gui.SelectedTableRowStyle : string.Empty;
    }
}
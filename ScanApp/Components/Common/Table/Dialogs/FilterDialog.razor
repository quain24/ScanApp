@inherits Dialog<T>
@typeparam T

<div @ref="_div" @onkeydown="OnKeyDown">*
    <MudDialog>
        <DialogContent>
            @if (Configs?.Count > 0)
            {
                <MudForm @ref="_form" @bind-IsValid="@_success" Class="m-0 p-0">
                    <FilterFieldCreator T="T" @ref="_filterFields" OnKeyDown="OnKeyDown" MaxFieldSetHeight="DialogContentHeight" StartExpanded="StartExpanded" Configs="Configs"/>
                </MudForm>
            }
        </DialogContent>
        <DialogActions>
            <MudButton Class="ml-auto" Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
            <MudButton Class="mr-auto" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_success" OnClick="Submit">Apply filters</MudButton>
        </DialogActions>
    </MudDialog>
</div>
@code
{
    /// <inheritdoc cref="FieldCreatorBase{T}.StartExpanded" />
    [Parameter] public bool StartExpanded { get; set; }

    private MudForm _form;
    private bool _success = true;
    private ElementReference _div;
    private FilterFieldCreator<T> _filterFields;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
            _div.FocusAsync();
    }

    protected override Task Submit()
    {
        if (_form is null)
        {
            MudDialog.Cancel();
            return Task.CompletedTask;
        }

        _form.Validate();

        if (_success is false)
            return Task.CompletedTask;
        var filters = _filterFields.GetFilters();

        MudDialog.Close(DialogResult.Ok(filters));
        return Task.CompletedTask;
    }

    protected override void Cancel() => MudDialog.Cancel();
}
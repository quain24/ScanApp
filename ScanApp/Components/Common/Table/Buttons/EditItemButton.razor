@using ScanApp.Components.Common.Table.Dialogs
@using ScanApp.Common.Extensions
@inherits MudButton
@inject IDialogService DialogService
@typeparam T

@{
    base.BuildRenderTree(__builder);
}

@code {
    /// <summary>
    /// Gets or sets <typeparam name="T" /> object copier necessary for creating copies for when 'edit' is enabled.<br />
    /// By default source item will be copied by built-in deep-copy mechanism that can be replaced if needed.
    /// Supported delegates are:
    /// <para><see cref="Func{T}">Func&lt;TTableType&gt;</see> - Parameter-less delegate creating new <typeparamref name="T" />.</para>
    /// <para><see cref="Func{Task{T}}">Func&lt;Task&lt;TTableType&gt;&gt;</see> - Async Parameter-less delegate creating new <typeparamref name="T" />.</para>
    /// </summary>
    [Parameter] public object ItemCopier { get; set; }

    /// <summary>
    /// Gets or sets collection of configuration objects used to generate all necessary fields in 'edit' dialog.
    /// </summary>
    /// <value>Collection of configuration objects.</value>
    [Parameter] public List<ColumnConfig<T>> Configs { get; set; }

    /// <summary>
    /// Gets or sets item which will be edited.
    /// </summary>
    [Parameter] public T SourceItem { get; set; }

    /// <summary>
    /// Called when source item has been modified.
    /// </summary>
    [Parameter] public EventCallback<T> SourceItemChanged { get; set; }

    /// <summary>
    /// Gets or sets how the edit dialog fields will be visible when dialog is opened.
    /// </summary>
    /// <value>If set to <see langword="true" />, dialog will start with all fields expanded (<strong>default</strong>).</value>
    [Parameter] public bool DialogStartsExpanded { get; set; } = true;

    /// <summary>
    /// Gets or sets how the edit dialog fields that are marked by validation as invalid will be visible when dialog is opened.
    /// </summary>
    /// <value>If set to <see langword="true" />, dialog will start with all invalid fields expanded (<strong>default</strong>).</value>
    [Parameter] public bool DialogInvalidFieldsStartExpanded { get; set; } = true;

    /// <summary>
    /// Gets or sets height of dialog content (which exclude buttons and header).
    /// </summary>
    /// <value>Dialog content height in pixels.</value>
    [Parameter] public int DialogContentHeight { get; set; }

    private new EventCallback OnClick { get; set; }

    protected override void OnInitialized()
    {
        base.OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, OpenEditItemDialog);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        _ = Configs ?? throw new ArgumentNullException(nameof(Configs));
        base.OnParametersSet();
    }

    private async Task OpenEditItemDialog()
    {
        try
        {
            Disabled = true;
            var dialog = DialogService.Show<EditDialog<T>>("Edit item",
                new DialogParameters
                {
                    ["Configs"] = Configs,
                    ["SourceItem"] = await CreateCopy(),
                    ["StartExpanded"] = DialogStartsExpanded,
                    ["DialogContentHeight"] = DialogContentHeight,
                    ["ExpandInvalidPanelsOnStart"] = DialogInvalidFieldsStartExpanded
                },
                Globals.Gui.DefaultDialogOptions);

            var result = await dialog.Result;
            if (result.Cancelled)
                return;
            await SourceItemChanged.InvokeAsync((T)result.Data);
        }
        finally
        {
            Disabled = false;
        }
    }

    private async Task<T> CreateCopy()
    {
        try
        {
            return ItemCopier switch
            {
                null => SourceItem.Copy(),
                Func<T, T> factory => factory.Invoke(SourceItem),
                Func<T, Task<T>> factory => await factory.Invoke(SourceItem).ConfigureAwait(false),
                _ => throw new ArgumentOutOfRangeException(nameof(ItemCopier), "Provided factory type is not compatible with allowed delegate types.")
            };
        }
        catch (Exception ex) when (ex is not OperationCanceledException)
        {
            throw new Exception($"Something went wrong when trying to create item copy for editing using provided {nameof(ItemCopier)}: {ex.Message}", ex);
        }
    }
}
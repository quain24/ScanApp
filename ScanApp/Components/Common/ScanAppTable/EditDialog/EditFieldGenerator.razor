@using ScanApp.Components.Common.ScanAppTable.Options
@using System.Reflection
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Rendering
@using ScanApp.Components.Common.ScanAppTable.FilterDialog
@typeparam TItem

@EditFields

@code {
    [Parameter]
    public List<ColumnConfig<TItem>> ColumnConfigs { get; set; }

    [Parameter]
    public TItem Item { get; set; }

    [Parameter]
    public EventCallback<(PropertyInfo, object)> ItemChanged { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> KeyPressed { get; set; }

    private RenderFragment EditFields { get; set; }

    protected override void OnInitialized()
    {
        EditFields = GenerateEditFields();
    }

    private RenderFragment GenerateEditFields() => builder =>
    {
        for (int i = 0; i < ColumnConfigs.Count; i++)
        {
            int localIterator = i;
            if (!ColumnConfigs[i].IsEditable)
            {
                GenerateNonEditableField(builder, i);
            }
            else if (TypeChecker.IsDateTime(ColumnConfigs[i].PropertyType))
            {
                GenerateDateTimeField(builder, i);
            }
            else if (TypeChecker.IsIntegerOrDecimal(ColumnConfigs[i].PropertyType))
            {
                Type nullableType = TypeChecker.GetNullableType(ColumnConfigs[i].PropertyType);
                GenerateNumericField(builder, i, nullableType);
            }
            else
            {
                Type nullableType = TypeChecker.GetNullableType(ColumnConfigs[i].PropertyType);
                GenerateTextField(builder, i, nullableType);
            }

        }
    };

    private void GenerateNonEditableField(RenderTreeBuilder builder, int index)
    {
        builder.OpenRegion(0);
        builder.OpenComponent(0, typeof(MudField));
        builder.AddAttribute(1, nameof(MudField.Label), ColumnConfigs[index].DisplayName);
        builder.AddAttribute(2, nameof(MudField.Variant), Variant.Filled);
        builder.AddAttribute(3, nameof(MudField.ChildContent), (RenderFragment)(builder2 =>
        {
            builder2.AddContent(4, ColumnConfigs[index].PropInfo.GetValue(Item));
        }));
        builder.CloseComponent();
        builder.CloseRegion();
    }

    private void GenerateDateTimeField(RenderTreeBuilder builder, int index)
    {
        builder.OpenRegion(1);
        builder.OpenComponent(0, typeof(MudDatePicker));
        builder.AddAttribute(1, nameof(MudDatePicker.Elevation), 7);
        builder.AddAttribute(2, nameof(MudDatePicker.PickerVariant), PickerVariant.Dialog);
        builder.AddAttribute(3, nameof(MudDatePicker.Label), ColumnConfigs[index].DisplayName);
        builder.AddAttribute(4, nameof(MudDatePicker.Editable), true);
        builder.AddAttribute(5, nameof(MudDatePicker.ShowWeekNumbers), true);
        builder.AddAttribute(6, nameof(MudDatePicker.DateChanged), CreateNullableEditDelegate(index));
        builder.AddAttribute(7, nameof(MudDatePicker.Date), ColumnConfigs[index].PropInfo.GetValue(Item));
        builder.AddAttribute(8, nameof(MudDatePicker.Validation), GetValidator(index));
        builder.CloseComponent();
        builder.CloseRegion();
    }

    private void GenerateNumericField(RenderTreeBuilder builder, int index, Type nullableType)
    {
        builder.OpenRegion(2);
        builder.OpenComponent(0, typeof(MudNumericField<>).MakeGenericType(nullableType));
        builder.AddAttribute(1, nameof(MudNumericField<string>.Label), "Between this value");
        builder.AddAttribute(2, nameof(MudNumericField<string>.Variant), Variant.Outlined);
        builder.AddAttribute(3, nameof(MudNumericField<string>.Immediate), true);
        builder.AddAttribute(4, nameof(MudNumericField<string>.Validation), GetNullableValidator(index));
        builder.AddAttribute(5, nameof(MudNumericField<string>.ValueChanged), CreateNullableEditDelegate(index));
        builder.AddAttribute(6, nameof(MudNumericField<string>.OnKeyPress), KeyPressed);
        builder.AddAttribute(7, nameof(MudNumericField<string>.Value), ColumnConfigs[index].PropInfo.GetValue(Item));
        builder.CloseComponent();
        builder.CloseRegion();
    }

    private void GenerateTextField(RenderTreeBuilder builder, int index, Type nullableType)
    {
        builder.OpenRegion(3);
        builder.OpenComponent(0, typeof(MudTextField<>).MakeGenericType(nullableType));
        builder.AddAttribute(1, nameof(MudTextField<string>.Value), ColumnConfigs[index].PropInfo.GetValue(Item));
        builder.AddAttribute(2, nameof(MudTextField<string>.Variant), Variant.Outlined);
        builder.AddAttribute(3, nameof(MudTextField<string>.Label), ColumnConfigs[index].DisplayName);
        builder.AddAttribute(4, nameof(MudTextField<string>.Immediate), true);
        builder.AddAttribute(5, nameof(MudTextField<string>.Validation), GetNullableValidator(index));
        builder.AddAttribute(6, nameof(MudTextField<string>.ValueChanged), CreateNullableEditDelegate(index));
        builder.AddAttribute(7, nameof(MudTextField<string>.OnKeyPress), KeyPressed);
    }
    private dynamic CreateEditDelegate(int iterator)
    {
        var callbackType = typeof(EventCallback<>).MakeGenericType(ColumnConfigs[iterator].PropertyType);

        async Task EditDelegate(dynamic obj)
        {
            await ItemChanged.InvokeAsync((ColumnConfigs[iterator].PropInfo, obj));
        }

        return Activator.CreateInstance(callbackType, this, (Func<dynamic, Task>)EditDelegate);
    }

    private dynamic CreateNullableEditDelegate(int iterator)
    {
        Type nullableType = TypeChecker.GetNullableType(ColumnConfigs[iterator].PropertyType);
        var callbackType = typeof(EventCallback<>).MakeGenericType(nullableType);

        async Task EditDelegate(dynamic obj)
        {
            await ItemChanged.InvokeAsync((ColumnConfigs[iterator].PropInfo, obj));
        }

        return Activator.CreateInstance(callbackType, this, (Func<dynamic, Task>)EditDelegate);
    }

    private Delegate GetValidator(int iterator)
    {
        var methodInfo = ColumnConfigs[iterator]
                .GetType()
                .GetMethod("Validate")
                ?.MakeGenericMethod(ColumnConfigs[iterator].PropertyType);
        var validatorFuncType = Expression.GetDelegateType(ColumnConfigs[iterator].PropertyType, typeof(IEnumerable<string>));
        return Delegate.CreateDelegate(validatorFuncType, ColumnConfigs[iterator], methodInfo);
    }

    private Delegate GetNullableValidator(int iterator)
    {
        Type nullableType = TypeChecker.GetNullableType(ColumnConfigs[iterator].PropertyType);

        var methodInfo = ColumnConfigs[iterator]
            .GetType()
            .GetMethod("Validate")
            ?.MakeGenericMethod(nullableType);
        var validatorFuncType = Expression.GetDelegateType(nullableType, typeof(IEnumerable<string>));
        return Delegate.CreateDelegate(validatorFuncType, ColumnConfigs[iterator], methodInfo);
    }
}
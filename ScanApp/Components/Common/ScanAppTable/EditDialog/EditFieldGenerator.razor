@using ScanApp.Components.Common.ScanAppTable.Options
@using System.Reflection
@using System.Linq.Expressions
@typeparam TItem

@EditFields

@code {
    [Parameter]
    public List<ColumnConfig<TItem>> ColumnConfigs { get; set; }

    [Parameter]
    public TItem Item { get; set; }

    [Parameter]
    public PropertyInfo[] Properties { get; set; }

    [Parameter]
    public EventCallback<(PropertyInfo, object)> ItemChanged { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> KeyPressed { get; set; }

    private RenderFragment EditFields { get; set; }
    private EventCallbackFactory _eventCallbackFactory = new EventCallbackFactory();

    protected override void OnInitialized()
    {
        EditFields = GenerateEditFields();
    }

    private RenderFragment GenerateEditFields() => builder =>
    {
        for (int i = 0; i < ColumnConfigs.Count; i++)
        {
            int localIterator = i;
            if (!ColumnConfigs[i].IsEditable)
            {
                builder.OpenRegion(0);
                builder.OpenComponent(0, typeof(MudField));
                builder.AddAttribute(1, nameof(MudField.Label), ColumnConfigs[i].DisplayName);
                builder.AddAttribute(2, nameof(MudField.Variant), Variant.Filled);
                builder.AddAttribute(3, nameof(MudField.ChildContent), (RenderFragment)(builder2 =>
                {
                    builder2.AddContent(4, Properties[localIterator].GetValue(Item));
                }));
                builder.CloseComponent();
                builder.CloseRegion();
                continue;
            }

            dynamic editDelegate = CreateEditDelegate(i);

            if (IsDateTime(ColumnConfigs[i].PropertyType))
            {
                builder.OpenRegion(1);
                builder.OpenComponent(0, typeof(MudDatePicker));
                builder.AddAttribute(1, nameof(MudDatePicker.Elevation), 7);
                builder.AddAttribute(2, nameof(MudDatePicker.PickerVariant), PickerVariant.Dialog);
                builder.AddAttribute(3, nameof(MudDatePicker.Label), ColumnConfigs[i].DisplayName);
                builder.AddAttribute(4, nameof(MudDatePicker.Editable), true);
                builder.AddAttribute(5, nameof(MudDatePicker.ShowWeekNumbers), true);
                builder.AddAttribute(6, nameof(MudDatePicker.DateChanged), editDelegate);
                builder.AddAttribute(7, nameof(MudDatePicker.Date), Properties[i].GetValue(Item) as DateTime?);
                builder.AddAttribute(8, nameof(MudDatePicker.Validation), GetValidator(i));
                builder.CloseComponent();
                builder.CloseRegion();
                continue;
            }

            builder.OpenRegion(2);
            builder.OpenComponent(0, typeof(MudTextField<>).MakeGenericType(ColumnConfigs[i].PropertyType));
            builder.AddAttribute(1, nameof(MudTextField<string>.Value), Properties[i].GetValue(Item));
            builder.AddAttribute(2, nameof(MudTextField<string>.Variant), Variant.Outlined);
            builder.AddAttribute(3, nameof(MudTextField<string>.Label), ColumnConfigs[i].DisplayName);
            builder.AddAttribute(4, nameof(MudTextField<string>.Immediate), true);
            builder.AddAttribute(5, nameof(MudTextField<string>.Validation), GetValidator(i));
            builder.AddAttribute(6, nameof(MudTextField<string>.ValueChanged), editDelegate);
            builder.AddAttribute(7, nameof(MudTextField<string>.OnKeyPress), KeyPressed);

            builder.CloseComponent();
            builder.CloseRegion();
        }
    };

    private bool IsDateTime(Type type)
    {
        return type == typeof(DateTime) || type == typeof(DateTime?);
    }

    private dynamic CreateEditDelegate(int iterator)
    {
        var callbackType = typeof(EventCallback<>).MakeGenericType(ColumnConfigs[iterator].PropertyType);

        async Task EditDelegate(dynamic obj)
        {
            Properties[iterator].SetValue(Item, obj);
            await ItemChanged.InvokeAsync((Properties[iterator], obj));
        }

        return Activator.CreateInstance(callbackType, this, (Func<dynamic, Task>)EditDelegate);
    }

    private Delegate GetValidator(int iterator)
    {
        var methodInfo =
            ColumnConfigs[iterator]
                .GetType()
                .GetMethod("Validate")
                ?.MakeGenericMethod(ColumnConfigs[iterator].PropertyType);
        var validatorFuncType = Expression.GetDelegateType(ColumnConfigs[iterator].PropertyType, typeof(IEnumerable<string>));
        return Delegate.CreateDelegate(validatorFuncType, ColumnConfigs[iterator], methodInfo);
    }
}
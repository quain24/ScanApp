@typeparam TItem
@using System.Reflection;
@using ScanApp.Components.Common.ScanAppTable.Options
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.Edit" />
            Edit
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer>
            <MudGrid>
                <MudForm @ref="_form" IsValidChanged="@OnValidationChanged">
                    <EditFieldGenerator ColumnConfigs="ColumnConfigs" Item="@Item" 
                                        ItemChanged="@((args) => ItemHasChanged(args.Item1, args.Item2))"
                                        KeyPressed="@KeyPressed"/>
                </MudForm>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Disabled="_okDisabled" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TItem Item { get; set; }

    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    [Parameter]
    public List<ColumnConfig<TItem>> ColumnConfigs { get; set; }

    private MudForm _form;
    private bool _okDisabled;

    private void ItemHasChanged(PropertyInfo property, object value)
    {
        property.SetValue(Item, value);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Submit()
    {
        if (!_form.IsValid)
        {
            return;
        }
        MudDialog.Close(DialogResult.Ok(Item));
    }

    private void KeyPressed(KeyboardEventArgs keyboardEventArg)
    {
        if (keyboardEventArg.Key != "Enter" || _okDisabled)
        {
            return;
        }
        Submit();
    }

    private void OnValidationChanged(bool isFormValid)
    {
        _okDisabled = !isFormValid;
    }

}
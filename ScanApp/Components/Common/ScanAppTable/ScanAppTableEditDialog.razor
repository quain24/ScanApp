@typeparam TItem
@using System.Reflection;
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.Edit"/>
            Edit
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll;">
            <MudGrid>
                <MudItem >
                    @for (int i = 0; i < _itemRepresentation.Objects.Length; i++)
                    {
                        int local = i;
                        if (!Headers.IsVisible(local))
                        {
                            continue;
                        }
                        else if (!Headers.IsEditable(local))
                        {
                            <MudField Label="@Headers.Names[local]" Variant="Variant.Filled">@_itemRepresentation.Objects[local].ToString()</MudField>
                        }
                        else if (_itemRepresentation.Objects[i].GetType() == typeof(string))
                        {
                            <MudTextField @bind-Value="@_itemRepresentation.Strings[local]" @onkeypress="KeyPressed" Immediate="true"
                                          Label="@Headers.Names[local]" Variant="Variant.Outlined"></MudTextField>
                        }
                        else if (_itemRepresentation.Objects[i].GetType() == typeof(int))
                        {
                            <MudTextField @bind-Value="@_itemRepresentation.Ints[local]" @onkeypress="KeyPressed" Immediate="true"
                                          Label="@Headers.Names[local]" Variant="Variant.Outlined"></MudTextField>
                        }
                        else if (_itemRepresentation.Objects[i].GetType() == typeof(DateTime))
                        {
                            <MudDatePicker Elevation="7" PickerVariant="PickerVariant.Dialog" Label="@Headers.Names[local]" 
                                           @bind-Date="@_itemRepresentation.DateTimes[local]" Editable="true" ShowWeekNumbers="true" />
                        }
                        else if (_itemRepresentation.Objects[i].GetType() == typeof(double))
                        {
                            <MudTextField @bind-Value="@_itemRepresentation.Doubles[local]" @onkeypress="KeyPressed" Immediate="true"
                                          Label="@Headers.Names[local]" Variant="Variant.Outlined"></MudTextField>
                        }
                        else if (_itemRepresentation.Objects[i].GetType() == typeof(decimal))
                        {
                            <MudTextField @bind-Value="@_itemRepresentation.Decimals[local]" @onkeypress="KeyPressed" Immediate="true"
                                          Label="@Headers.Names[local]" Variant="Variant.Outlined"></MudTextField>
                        }
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TItem Item { get; set; }

    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    [Parameter]
    public Header Headers { get; set; }

    private PropertyInfo[] _properties { get; set; }
    private ItemRepresentation _itemRepresentation { get; set; }

    protected override Task OnInitializedAsync()
    {
        _properties = Item.GetType().GetProperties();
        _itemRepresentation = new ItemRepresentation(_properties);
        for (int i = 0; i < _properties.Length; i++)
        {
            _itemRepresentation.Objects[i] = _properties[i].GetValue(Item);
        }
        _itemRepresentation.MapItemToArrays();
        return base.OnInitializedAsync();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Submit()
    {
        _itemRepresentation.SaveChanges();
        for (int i = 0; i < _properties.Length; i++)
        {
            _properties[i].SetValue(Item, _itemRepresentation.Objects[i]);
        }
        MudDialog.Close(DialogResult.Ok(Item));
    }

    private void KeyPressed(KeyboardEventArgs keyboardEventArg)
    {
        if (keyboardEventArg.Key != "Enter")
        {
            return;
        }
        Submit();
    }
}

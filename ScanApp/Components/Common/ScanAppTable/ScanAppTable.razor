@typeparam TItem
@inject IDialogService DialogService
@inject ISnackbar SnackBar
@using System.Reflection;
@using ScanApp.Components.Common.ScanAppTable.AddDialog
@using ScanApp.Components.Common.ScanAppTable.EditDialog;
@using ScanApp.Components.Common.ScanAppTable.FilterDialog;
@using ScanApp.Components.Common.ScanAppTable.GroupDialog;
@using ScanApp.Components.Common.ScanAppTable.Options;
@using ScanApp.Components.Common.ScanAppTable.Sorter;

@if (Loading)
{
    <MudContainer Fixed="true" Style="width: 100%; height: 500px;">
        <MudProgressCircular Style="position: absolute; left: 50%; margin-left: -10px; top: 50%; margin-top: -10px;"
                             Color="Color.Info" Size="Size.Large" Indeterminate="true" />
    </MudContainer>
}
else
{
    @if (GroupingEnabled)
    {
        <MudTabs Position="@Position.Left" Rounded="true" MaxHeight="600" ApplyEffectsToContainer="true" AlwaysShowScrollButtons="true"
                 Class="mt-8" PanelClass="pa-6">
            @foreach (var group in _groupList)
            {
                <MudTabPanel Text="@GetShorterString(group.Key)">
                    <MudTable Style="@TableStyle" Items="group.ItemGroup" Dense="true" FixedHeader="true" Height="@Height" Breakpoint="Breakpoint.None">
                        <HeaderContent>
                            @for (int i = 0; i < ColumnConfigs.Count; i++)
                            {
                                int local = i;
                                <MudTh @onclick="() => SubSortBy(group.ItemGroup, SubScanAppTableSorter, ColumnConfigs[local].PropInfo, ColumnConfigs[local].DisplayName)">
                                    @ColumnConfigs[local].DisplayName
                                    @if (SubScanAppTableSorter.AscendingOrder == ColumnConfigs[local].PropertyName)
                                    {
                                        <MudIcon Icon="@Icons.Material.Outlined.ArrowUpward" />
                                    }
                                    else if (SubScanAppTableSorter.DescendingOrder == ColumnConfigs[local].PropertyName)
                                    {
                                        <MudIcon Icon="@Icons.Material.Outlined.ArrowDownward" />
                                    }
                                </MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            @for (int i = 0; i < ColumnConfigs.Count; i++)
                                        {
                                            int local = i;
                                <MudTd @onclick="() => OpenEditDialog(context)" Style="font-size: small">@ColumnConfigs[local].PropInfo.GetValue(context)</MudTd>
                                        }
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
            }
        </MudTabs>
    }
    else
    {
        <MudPaper Elevation="3" Style="margin: 10px;">
            <MudTable Style="@TableStyle" MultiSelection="MultiSelectionEnabled" @bind-SelectedItems="_selectedItems" Items="ShownItems" Dense="true"
                      FixedHeader="true" Height="@Height" Breakpoint="Breakpoint.None" SortLabel="Sort By">
                <HeaderContent>
                    @for (int i = 0; i < ColumnConfigs.Count; i++)
                            {
                                int local = i;
                        <MudTh @onclick="() => SortBy(ScanAppTableSorter, ColumnConfigs[local].PropInfo, ColumnConfigs[local].DisplayName)">
                            @ColumnConfigs[local].DisplayName
                            @if (ScanAppTableSorter.AscendingOrder == ColumnConfigs[local].PropertyName)
                                    {
                                <MudIcon Icon="@Icons.Material.Outlined.ArrowUpward" />
                                    }
                                    else if (ScanAppTableSorter.DescendingOrder == ColumnConfigs[local].PropertyName)
                                    {
                                <MudIcon Icon="@Icons.Material.Outlined.ArrowDownward" />
                                    }
                        </MudTh>
                            }
                </HeaderContent>
                <RowTemplate>
                    @for (int i = 0; i < ColumnConfigs.Count; i++)
                            {
                                int local = i;
                        <MudTd @onclick="() => OpenEditDialog(context)" Style="font-size: small">@ColumnConfigs[local].PropInfo.GetValue(context)</MudTd>
                            }
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
    @if (Options.ShowToolBar)
    {
        <MudToolBar>
            @if (MenuOpened || Options.ToolBarAlwaysOpened)
            {
                @if (!Options.ToolBarAlwaysOpened)
                {
                    <MudIconButton OnClick="ToggleMenu" Icon="@Icons.Material.Outlined.Close"></MudIconButton>
                }
                @if (Options.AllowAdding)
                {
                    <MudIconButton OnClick="() => OpenAddDialog()" Icon="@Icons.Material.Outlined.Add"></MudIconButton>
                }
                @if (Options.AllowGrouping)
                {
                    @if (!GroupingEnabled && Options.AllowFiltering)
                    {
                        <MudIconButton OnClick="() => OpenFilterDialog(ScanAppTableSorter)" Icon="@Icons.Material.Outlined.CleaningServices"></MudIconButton>
                    }
                    <MudIconButton OnClick="() => OpenGroupDialog()" Icon="@Icons.Material.Outlined.Group"></MudIconButton>
                }
                else
                {
                    if (Options.AllowFiltering)
                    {
                        <MudIconButton OnClick="() => OpenFilterDialog(ScanAppTableSorter)" Icon="@Icons.Material.Outlined.CleaningServices"></MudIconButton>
                    }
                }
                @if (DataIsFiltered && !GroupingEnabled)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Refresh" OnClick="() => ResetFilter(ScanAppTableSorter)"></MudIconButton>
                }
                @if (GroupingEnabled)
                {
                    <MudIconButton OnClick="ToggleGroupingMenu" Icon="@Icons.Material.Outlined.ArrowBack"></MudIconButton>
                }
                @if (Options.AllowDeleting && !GroupingEnabled)
                {
                    <MudIconButton OnClick="ToggleMultiSelection" Icon="@Icons.Material.Outlined.SelectAll"></MudIconButton>
                }
                @if (MultiSelectionEnabled && _selectedItems.Count > 0 && !GroupingEnabled)
                {
                    <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="@OpenDeleteConfirmationDialog" />
                }
            }
            else
            {
                <MudIconButton OnClick="ToggleMenu" Icon="@Icons.Material.Outlined.Menu"></MudIconButton>
            }
            <MudToolBarSpacer />
        </MudToolBar>
    }

    <MudMessageBox @ref="_confirmDeletionBox" Title="Warning">
        <MessageContent>
            Are you sure you want to delete @_selectedItems.Count.ToString() items?
        </MessageContent>
        <NoButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Filled.Cancel">Cancel</MudButton>
        </NoButton>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
        </YesButton>
    </MudMessageBox>
}

@code
{
    /// <summary>
    /// Collection of items that the table will display
    /// </summary>
    [Parameter]
    public List<TItem> Items { get; set; } = new List<TItem>(0);

    /// <summary>
    /// Delegate that is invoked every time when an Item is added to the table through Add dialog.
    /// Returns an added item.
    /// </summary>
    [Parameter]
    public Action<TItem> ItemAdded { get; set; }

    /// <summary>
    /// List of <paramref name="Items" /> that were deleted in the last deleting operation.
    /// </summary>
    [Parameter]
    public List<TItem> RecentlyDeletedItems { get; set; }

    /// <summary>
    /// Required: List of <paramref name="ColumnConfig" /> objects used for column configuration including
    /// validators and permissions for editing, filtering and grouping for each column.
    /// </summary>
    [Parameter]
    public List<ColumnConfig<TItem>> ColumnConfigs { get; set; }

    /// <summary>
    /// Required: <paramref name="ScanAppTableOptions" /> object that defines basic and global
    /// settings for the <paramref name="ScanAppTable" />.
    /// </summary>
    [Parameter]
    public ScanAppTableOptions Options { get; set; }

    [Parameter]
    public EventCallback<List<TItem>> ItemsChanged { get; set; }

    /// <summary>
    /// Height of the table
    /// </summary>
    [Parameter]
    public string Height { get; set; }

    /// <summary>
    /// Style passed to the table component
    /// </summary>
    [Parameter]
    public string TableStyle { get; set; }

    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    /// <summary>
    /// Delegate that is invoked every time an item has been edited in the table.
    /// Passes an edited Item as a parameter.
    /// </summary>
    [Parameter]
    public Action<TItem> SaveChanges { get; set; }

    /// <summary>
    /// Required: A delegate to the setup function that will get data needed for the table to render.
    /// The function should include setting up <paramref name="ColumnConfigs" /> parameter as well as populating the <paramref name="Items" /> collection,
    /// for example by database call.
    /// This function is called every time the table is initialized.
    /// </summary>
    [Parameter]
    public Func<Task> GetData { get; set; }

    /// <summary>
    /// Event raised every time any value has changed in the table.
    /// </summary>
    [Parameter]
    public EventCallback ValuesChanged { get; set; }

    /// <summary>
    /// Delegate that is invoked every time an item has been deleted from the table. Returns a list of deleted <paramref name="Items" />.
    /// </summary>
    [Parameter]
    public Action<List<TItem>> DeleteData { get; set; }

    /// <summary>
    /// <paramref name="DialogOptions" /> object which defines how all dialogs look like in all dialog based features in the table.
    /// </summary>
    [Parameter]
    public DialogOptions DialogOptions { get; set; }

    /// <summary>
    /// <paramref name="Item" /> that was added in the last add operation.
    /// </summary>
    public TItem RecentlyAddedItem { get; set; }

    private PropertyInfo[] Properties { get; set; }
    private ScanAppTableSorter<TItem> ScanAppTableSorter { get; set; }
    private ScanAppTableSorter<TItem> SubScanAppTableSorter { get; set; }
    private List<TItem> ShownItems { get; set; }
    private Type ItemType { get; set; }
    private bool DataIsFiltered { get; set; }
    private bool MenuOpened { get; set; }
    private bool GroupingEnabled { get; set; }
    private bool Loading { get; set; } = true;
    private bool MultiSelectionEnabled = false;

    private List<Group<TItem>> _groupList { get; set; } = new();
    private HashSet<TItem> _selectedItems = new();
    private MudMessageBox _confirmDeletionBox;

    /// <summary>
    /// Updates the table with provided <paramref name="items" />. Disables filtering and grouping to prevent
    /// errors/not up to date data being displayed. Useful for quick in-table values change.
    /// </summary>
    /// <param name="items"></param>
    public void UpdateTable(List<TItem> items)
    {
        ShownItems = ItemCloner.Clone(items);
        DataIsFiltered = false;
        GroupingEnabled = false;
    }

    private void InvokeSaveChanges(TItem titem)
    {
        SaveChanges?.Invoke(titem);
        ValuesChanged.InvokeAsync();
    }

    private async Task InvokeGetData()
    {
        Loading = true;
        await GetData();
        await ValuesChanged.InvokeAsync();
        Loading = false;
    }

    private void InvokeDeleteData(List<TItem> itemList)
    {
        DeleteData?.Invoke(itemList);
    }

    private async Task InvokeDeleteDataAsync(List<TItem> itemList)
    {
        await Task.Run(() => InvokeDeleteData(itemList));
    }

    private void InvokeItemAdded(TItem item)
    {
        ItemAdded?.Invoke(item);
    }

    private async Task InvokeItemAddedAsync(TItem item)
    {
        await Task.Run(() => InvokeItemAdded(item));
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeGetData();

        if (ColumnConfigs is null || ColumnConfigs.Count == 0)
        {
            throw new ArgumentNullException(nameof(ColumnConfigs), "ScanAppTable cannot render if not provided with ColumnConfig collection");
        }

        ShownItems = ItemCloner.Clone(Items);
        ScanAppTableSorter = new ScanAppTableSorter<TItem>();
        SubScanAppTableSorter = new ScanAppTableSorter<TItem>();

        Options ??= new ScanAppTableOptions()
        {
            AllowFiltering = true,
            AllowGrouping = true
        };

        DialogOptions ??= new DialogOptions { MaxWidth = MaxWidth.Large };

        ItemType = Items.FirstOrDefault()?.GetType();
        Properties = ItemType?.GetProperties();

        AssignPropertiesToColumnConfigs();
        ExtractOnlyUsefulPropertiesInOrder();
    }

    private void ToggleMenu()
    {
        MenuOpened = !MenuOpened;
    }

    private async Task OpenEditDialog(TItem item)
    {
        if (!IsAnyFieldEditable() || MultiSelectionEnabled)
        {
            return;
        }

        var itemClone = ItemCloner.Clone(item);
        int originalIndex = FindIndex(Items, item);

        if (originalIndex < 0)
            throw new ArgumentOutOfRangeException(nameof(item), "Could not find cloned item in the original collection");

        var parameter = new DialogParameters
        {
            ["Item"] = itemClone,
            ["ColumnConfigs"] = ColumnConfigs

        };
        var dialog = DialogService.Show<ScanAppTableEditDialog<TItem>>("Edit", parameter, DialogOptions);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }

        if (GroupingEnabled)
        {
            var groupWithEditedItem = _groupList
                .Select(g => g.ItemGroup)
                .Where(g => g.Contains(item))
                .ToList()
                .First();

            groupWithEditedItem[groupWithEditedItem.IndexOf(item)] = (TItem)result.Data;
        }

        Items[originalIndex] = (TItem)result.Data;
        ShownItems[ShownItems.IndexOf(item)] = (TItem)result.Data;
        InvokeSaveChanges(item);
        await ValuesChanged.InvokeAsync();
    }

    private async Task OpenGroupDialog()
    {
        var parameter = new DialogParameters
        {
            ["ColumnConfigs"] = ColumnConfigs,
            ["Items"] = ShownItems
        };
        var dialog = DialogService.Show<ScanAppTableGroupDialog<TItem>>("Group By", parameter);
        var result = await dialog.Result;

        if (result.Cancelled)
        {
            return;
        }

        _groupList.Clear();

        _groupList = (List<Group<TItem>>)result.Data;

        if (_groupList.Count == 0)
        {
            return;
        }

        SubScanAppTableSorter.ResetSortingStatus();
        GroupingEnabled = true;
    }

    private string GetShorterString(string str)
    {
        if (str.Length > 10)
        {
            str = str.Substring(0, 10);
            return str + "...";
        }
        return str;
    }

    private void ToggleGroupingMenu()
    {
        GroupingEnabled = !GroupingEnabled;
    }

    private async Task OpenFilterDialog(ScanAppTableSorter<TItem> sorter)
    {
        var parameter = new DialogParameters
        {
            ["Items"] = ShownItems,
            ["ColumnConfigs"] = ColumnConfigs,
            ["Options"] = Options
        };
        var dialog = DialogService.Show<ScanAppTableFilterDialog<TItem>>("Filter", parameter, DialogOptions);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        ShownItems = (List<TItem>)result.Data;
        DataIsFiltered = true;
        sorter.ResetSortingStatus();
    }

    private async Task ResetFilter(ScanAppTableSorter<TItem> sorter)
    {
        DataIsFiltered = false;
        sorter.ResetSortingStatus();
        ShownItems = ItemCloner.Clone(Items);
    }

    private async Task OpenAddDialog()
    {
        var constructor = GetPublicParameterlessConstructor(ItemType);
        if (constructor is null)
        {
            throw new Exception("Class provided to the ScanAppTable does not implement a public parameterless constructor." +
                                " It is not possible to use Adding feature of the table without it.");
        }

        TItem newItem = (TItem)constructor.Invoke(null);

        var parameter = new DialogParameters()
        {
            ["ColumnConfigs"] = ColumnConfigs,
            ["NewItem"] = newItem
        };
        var dialog = DialogService.Show<ScanAppTableAddDialog<TItem>>("Add", parameter, DialogOptions);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        RecentlyAddedItem = (TItem)result.Data;
        ShownItems.Add(RecentlyAddedItem);
        Items.Add(RecentlyAddedItem);

        await InvokeItemAddedAsync(RecentlyAddedItem);
        await ValuesChanged.InvokeAsync();
    }

    private async Task OpenDeleteConfirmationDialog()
    {
        var result = await _confirmDeletionBox.Show();
        if (!result.HasValue) return;

        if (result.Value)
        {
            await DeleteSelectedItems();
        }
    }

    private async Task DeleteSelectedItems()
    {
        var deletionList = new List<TItem>();
        RecentlyDeletedItems?.Clear();
        foreach (var item in _selectedItems)
        {
            Items.RemoveAt(FindIndex(Items, item));
            ShownItems.RemoveAt(FindIndex(ShownItems, item));
            deletionList.Add(item);
        }
        _selectedItems.Clear();
        MultiSelectionEnabled = false;
        RecentlyDeletedItems = deletionList;
        await InvokeDeleteDataAsync(deletionList);
    }

    private void ToggleMultiSelection() => MultiSelectionEnabled = !MultiSelectionEnabled;

    private EventCallback SortBy(ScanAppTableSorter<TItem> sorter, PropertyInfo propertyInfo, string header)
    {
        sorter.CurrentlySorted = header;
        var direction = sorter.ResolveSortDirection(propertyInfo);
        ShownItems = sorter.OrderByPropertyName(ShownItems, propertyInfo.Name, direction);

        return EventCallback.Empty;
    }

    private EventCallback SubSortBy(IEnumerable<TItem> items, ScanAppTableSorter<TItem> sorter, PropertyInfo propertyInfo, string header)
    {
        // Recognise which item group it is
        for (int i = 0; i < _groupList.Count; i++)
        {
            if (_groupList[i].ItemGroup[0].Equals(items.First<TItem>()))
            {
                sorter.CurrentlySorted = header;
                var direction = sorter.ResolveSortDirection(propertyInfo);
                _groupList[i].ItemGroup = sorter.OrderByPropertyName(_groupList[i].ItemGroup, propertyInfo.Name, direction).ToList();
                break;
            }
        }
        return EventCallback.Empty;
    }

    private int FindIndex(List<TItem> items, TItem item)
    {
        for (int i = 0; i < items.Count; i++)
        {
            if (ItemsAreIdentical(items[i], item))
                return i;
        }
        return -1;
    }

    private bool ItemsAreIdentical(TItem item1, TItem item2)
    {
        foreach (var prop in Properties)
        {
            if (prop.GetValue(item1)?.ToString() != prop.GetValue(item2)?.ToString())
                return false;
        }
        return true;
    }

    private void AssignPropertiesToColumnConfigs()
    {
        for (int i = 0; i < ColumnConfigs.Count; i++)
        {
            for (int j = 0; j < Properties.Length; j++)
            {
                if (ColumnConfigs[i].PropertyName == Properties[j].Name)
                    ColumnConfigs[i].PropInfo = Properties[j];
            }
        }
    }

    private void ExtractOnlyUsefulPropertiesInOrder()
    {
        Properties = new PropertyInfo[ColumnConfigs.Count];
        for (int i = 0; i < ColumnConfigs.Count; i++)
        {
            Properties[i] = ColumnConfigs[i].PropInfo;
        }
    }

    private bool IsAnyFieldEditable()
    {
        return ColumnConfigs.Any(x => x.IsEditable);
    }

    private ConstructorInfo? GetPublicParameterlessConstructor(Type type)
    {
        return type.GetConstructor(Type.EmptyTypes);
    }
}
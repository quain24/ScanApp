@typeparam TItem

@using ScanApp.Components.Common.ScanAppTable.Options
@using System.Reflection
@using System.Security.Cryptography.X509Certificates
@using FluentValidation
@using Newtonsoft.Json.Bson
@using ScanApp.Common
@using ScanApp.Components.Admin

@for (int i = 0; i < Properties.Length; i++)
{
    int localIterator = i;

    if (Properties[localIterator].PropertyType == typeof(int))
    {
        <MudExpansionPanel @ref="@_expansionPanels[localIterator]" Text="@ColumnConfigs[localIterator].DisplayName" Style="margin-left: 5px; margin-right: 5px;">
            <MudTextField @ref="@_fromTextFields[localIterator]" @bind-Value="@From[localIterator]" @onkeypress="KeyPressed" @onkeydown="() => ResetErrorState(localIterator)"
                          @onfocus="() => ResetErrorState(localIterator)" Error="@GetError(localIterator)" Immediate="true" Label="From"
                          Variant="Variant.Outlined"></MudTextField>
            <MudTextField @ref="@_toTextFields[localIterator]" @bind-Value="@To[localIterator]" @onkeypress="KeyPressed" @onkeydown="() => ResetErrorState(localIterator)"
                          @onfocus="() => ResetErrorState(localIterator)" Error="@GetError(localIterator)" ErrorText="@GetErrorMessage(localIterator)"
                          Immediate="true" Label="To" Variant="Variant.Outlined"></MudTextField>
        </MudExpansionPanel>
    }
    else if (Properties[localIterator].PropertyType == typeof(string))
    {
        <MudExpansionPanel Text="@ColumnConfigs[localIterator].DisplayName" Style="margin-left: 5px; margin-right: 5px;">
            <MudTextField @bind-Value="@Contains[localIterator]" @onkeypress="KeyPressed" Immediate="true" Label="Contains"
                          Variant="Variant.Outlined"></MudTextField>
        </MudExpansionPanel>
    }
    else if (Properties[localIterator].PropertyType == typeof(DateTime))
    {
        <MudExpansionPanel Text="@ColumnConfigs[localIterator].DisplayName" Style="margin-left: 5px; margin-right: 5px;">
            <MudDatePicker Elevation="7" PickerVariant="PickerVariant.Dialog" Label="From"
                           @bind-Date="@FromDate[localIterator]" Editable="true"
                           ShowWeekNumbers="true" />
            <MudDatePicker Elevation="7" PickerVariant="PickerVariant.Dialog" Label="To"
                           @bind-Date="@ToDate[localIterator]" Editable="true"
                           ShowWeekNumbers="true" />
        </MudExpansionPanel>
    }
}
@code {

    [Parameter]
    public List<Options.ColumnConfig<TItem>> ColumnConfigs { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> KeyPressed { get; set; }

    [Parameter]
    public PropertyInfo[] Properties { get; set; }

    [Parameter]
    public int?[] From { get; set; }

    [Parameter]
    public int?[] To { get; set; }

    [Parameter]
    public string[] Contains { get; set; }

    [Parameter]
    public DateTime?[] FromDate { get; set; }

    [Parameter]
    public DateTime?[] ToDate { get; set; }

    [Parameter]
    public ScanAppTableOptions Options { get; set; }

    private MudExpansionPanel[] _expansionPanels;
    private MudTextField<int?>[] _fromTextFields;
    private MudTextField<int?>[] _toTextFields;

    private bool[] _fromToErrors;
    private bool[] _negativeNumbersErrors;
    private bool[] _conversionErrors;
    private string _fromToErrorMessage = "\"From\" cannot be larger than \"To\"";
    private string _negativeNumberErrorMessage = "Negative numbers are not allowed";

    protected override Task OnInitializedAsync()
    {
        _expansionPanels = new MudExpansionPanel[Properties.Length];
        _fromTextFields = new MudTextField<int?>[Properties.Length];
        _toTextFields = new MudTextField<int?>[Properties.Length];

        InitializeErrorArrays(Properties.Length);

        return base.OnInitializedAsync();
    }

    public bool AreFilterFieldsValid()
    {
        InitializeErrorArrays(Properties.Length);
        return AreFromToFieldsValid();
    }

    private void InitializeErrorArrays(int size)
    {
        _fromToErrors = new bool[size];
        _negativeNumbersErrors = new bool[size];
        _conversionErrors = new bool[size];
    }

    private bool AreFromToFieldsValid()
    {
        for (int i = 0; i < _fromTextFields.Length; i++)
        {
            if (AnyOfTheFieldsHasConversionErrors(i))
                _conversionErrors[i] = true;

            if (FromIsLargerThanToError(i))
                _fromToErrors[i] = true;
            else
                _fromToErrors[i] = false;

            if (NegativeNumbersError(i))
                _negativeNumbersErrors[i] = true;
            else
                _negativeNumbersErrors[i] = false;
        }

        OpenExpansionPanelsWithErrors();

        if (_conversionErrors.Contains(true))
            return false;

        return !_fromToErrors.Contains(true) && !_negativeNumbersErrors.Contains(true);
    }

    private bool FromIsLargerThanToError(int index)
    {
        if (!From[index].HasValue || !To[index].HasValue)
            return false;

        return From[index] > To[index];
    }

    private bool NegativeNumbersError(int index)
    {
        if ((From[index] < 0 || To[index] < 0) && !AreNegativeNumbersAllowed())
        {
            return true;
        }
        return false;
    }

    private void ResetErrorState(int index)
    {
        _fromToErrors[index] = false;
        _negativeNumbersErrors[index] = false;
        _conversionErrors[index] = false;
    }

    private void OpenExpansionPanelsWithErrors()
    {
        for (int i = 0; i < _expansionPanels.Length; i++)
        {
            if (_fromToErrors[i] || _negativeNumbersErrors[i] || _conversionErrors[i])
            {
                _expansionPanels[i].IsExpanded = true;
            }
        }
    }

    private bool GetError(int index)
    {
        if (_negativeNumbersErrors[index])
            return true;

        if (_fromToErrors[index])
            return true;

        return false;
    }

    private string GetErrorMessage(int index)
    {
        if (_negativeNumbersErrors[index])
            return _negativeNumberErrorMessage;

        if (_fromToErrors[index])
            return _fromToErrorMessage;

        return "Not a valid number";
    }

    private bool AnyOfTheFieldsHasConversionErrors(int index)
    {
        if (FromFieldHasErrors(index) || ToFieldHasErrors(index))
            return true;

        return false;
    }

    private bool FromFieldHasErrors(int index) => _fromTextFields[index]?.HasErrors is true;

    private bool ToFieldHasErrors(int index) => _toTextFields[index]?.HasErrors is true;

    private bool AreNegativeNumbersAllowed() => Options.AllowNegativeNumbersInFiltering;

}
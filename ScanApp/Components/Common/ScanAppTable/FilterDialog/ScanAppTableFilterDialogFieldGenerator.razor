@typeparam TItem

@using ScanApp.Components.Common.ScanAppTable.Options
@using System.Reflection
@using System.Security.Cryptography.X509Certificates
@using FluentValidation
@using Newtonsoft.Json.Bson
@using ScanApp.Common
@using ScanApp.Components.Admin

@for (int i = 0; i < Properties.Length; i++)
{
    int localIterator = i;

    if (Properties[localIterator].PropertyType == typeof(int))
    {
        <MudExpansionPanel @ref="@_expansionPanels[localIterator]" Text="@ColumnConfigs[localIterator].DisplayName" Style="margin-left: 5px; margin-right: 5px;">
            <MudTextField @ref="@_fromTextFields[localIterator]" @bind-Value="@From[localIterator]" @onkeypress="KeyPressed" Immediate="true" Label="From"
                          Variant="Variant.Outlined" Validation="ColumnConfigs[localIterator].ToMudFormFieldValidator<int?>()"></MudTextField>
            <MudTextField @ref="@_toTextFields[localIterator]" @bind-Value="@To[localIterator]" @onkeypress="KeyPressed"
                          Immediate="true" Label="To" Variant="Variant.Outlined" Validation="ColumnConfigs[localIterator].ToMudFormFieldValidator<int?>()"></MudTextField>
        </MudExpansionPanel>
    }
    else if (Properties[localIterator].PropertyType == typeof(string))
    {
        <MudExpansionPanel Text="@ColumnConfigs[localIterator].DisplayName" Style="margin-left: 5px; margin-right: 5px;">
            <MudTextField @bind-Value="@Contains[localIterator]" @onkeypress="KeyPressed" Immediate="true" Label="Contains"
                          Variant="Variant.Outlined" Validation="ColumnConfigs[localIterator].ToMudFormFieldValidator<string>()"></MudTextField>
        </MudExpansionPanel>
    }
    else if (Properties[localIterator].PropertyType == typeof(DateTime))
    {
        <MudExpansionPanel Text="@ColumnConfigs[localIterator].DisplayName" Style="margin-left: 5px; margin-right: 5px;">
            <MudDatePicker Elevation="7" PickerVariant="PickerVariant.Dialog" Label="From"
                           @bind-Date="@FromDate[localIterator]" Editable="true"
                           ShowWeekNumbers="true" Validation="ColumnConfigs[localIterator].ToMudFormFieldValidator<DateTime?>()"/>
            <MudDatePicker Elevation="7" PickerVariant="PickerVariant.Dialog" Label="To"
                           @bind-Date="@ToDate[localIterator]" Editable="true"
                           ShowWeekNumbers="true" Validation="ColumnConfigs[localIterator].ToMudFormFieldValidator<DateTime?>()"/>
        </MudExpansionPanel>
    }
}
@code {

    [Parameter]
    public List<ColumnConfig<TItem>> ColumnConfigs { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> KeyPressed { get; set; }

    [Parameter]
    public PropertyInfo[] Properties { get; set; }

    [Parameter]
    public int?[] From { get; set; }

    [Parameter]
    public int?[] To { get; set; }

    [Parameter]
    public string[] Contains { get; set; }

    [Parameter]
    public DateTime?[] FromDate { get; set; }

    [Parameter]
    public DateTime?[] ToDate { get; set; }

    [Parameter]
    public ScanAppTableOptions Options { get; set; }

    private MudExpansionPanel[] _expansionPanels;
    private MudTextField<int?>[] _fromTextFields;
    private MudTextField<int?>[] _toTextFields;

    private bool[] _fromToErrors;
    private bool[] _conversionErrors;
    private string _fromToErrorMessage = "\"From\" cannot be larger than \"To\"";

    protected override Task OnInitializedAsync()
    {
        _expansionPanels = new MudExpansionPanel[Properties.Length];
        _fromTextFields = new MudTextField<int?>[Properties.Length];
        _toTextFields = new MudTextField<int?>[Properties.Length];

        return base.OnInitializedAsync();
    }
}
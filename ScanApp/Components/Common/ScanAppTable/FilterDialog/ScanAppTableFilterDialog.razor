@typeparam TItem
@using System.Reflection;
@using ScanApp.Components.Common.ScanAppTable.Extensions
@using ScanApp.Components.Common.ScanAppTable.Options
@using ScanApp.Components.Common.ScanAppTable.FilterDialog.FilteringOperations

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.CleaningServices" />
            Filter
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="@DialogStyle.GetDialogStyle(Properties.Length)">
            <MudGrid>
                <MudItem>
                    <MudExpansionPanels MultiExpansion="true">
                        <ScanAppTableFilterDialogFieldGenerator @ref="_fieldGenerator" ColumnConfigs="ColumnConfigs" KeyPressed="KeyPressed" Properties="Properties"
                                                                From="From" To="To" Contains="Contains" FromDate="FromDate" ToDate="ToDate"
                                                                Options="Options"/>
                    </MudExpansionPanels>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public List<ColumnConfig<TItem>> ColumnConfigs { get; set; }

    [Parameter]
    public PropertyInfo[] Properties { get; set; }

    [Parameter]
    public ScanAppTableOptions Options { get; set; }

    private int?[] From { get; set; }
    private int?[] To { get; set; }
    private string[] Contains { get; set; }
    private DateTime?[] FromDate { get; set; }
    private DateTime?[] ToDate { get; set; }
    private ScanAppTableFilterDialogFieldGenerator<TItem> _fieldGenerator;

    protected override Task OnInitializedAsync()
    {
        From = new int?[Properties.Length];
        To = new int?[Properties.Length];
        Contains = new string[Properties.Length];
        FromDate = new DateTime?[Properties.Length];
        ToDate = new DateTime?[Properties.Length];
        return base.OnInitializedAsync();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Submit()
    {
        if (!_fieldGenerator.AreFilterFieldsValid())
        {
            return;
        }
        var filteringOperationFactory = new FilteringOperationsFactory(Properties, From, To, Contains, FromDate, ToDate);
        var filteringOperations = filteringOperationFactory.CreateOperations();

        foreach (var operation in filteringOperations)
        {
            Items = operation.Run(Items);
        }

        MudDialog.Close(DialogResult.Ok(Items));
    }

    private void KeyPressed(KeyboardEventArgs keyboardEventArg)
    {
        if (keyboardEventArg.Key != "Enter")
        {
            return;
        }
        Submit();
    }
}
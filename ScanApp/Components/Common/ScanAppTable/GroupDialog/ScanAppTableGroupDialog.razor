@typeparam TItem
@using System.Reflection;
@using ScanApp.Components.Common.ScanAppTable.Extensions
@using ScanApp.Components.Common.ScanAppTable.Options
@using SharedExtensions

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.Group" />
            Group By
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect T="string" Label="Group By" @bind-Value="_selectedGroupBy">
            @for (int i = 0; i < ColumnConfigs.Count; i++)
            {
                int localIterator = i;
                if (!ColumnConfigs[localIterator].IsGroupable)
                {
                    continue;
                }
                <MudSelectItem Value="@ColumnConfigs[localIterator].DisplayName" />
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        @if (_selectedGroupBy.IsNullOrEmpty())
        {
            <MudButton Color="Color.Primary" Disabled="true">Ok</MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public List<Options.ColumnConfig<TItem>> ColumnConfigs { get; set; }

    private string _selectedGroupBy;
    private bool SubmitDisabled;
    private Dictionary<string, Options.ColumnConfig<TItem>> _propertiesColumnConfigsPairs;

    protected override Task OnInitializedAsync()
    {
        _propertiesColumnConfigsPairs = new Dictionary<string, Options.ColumnConfig<TItem>>();
        for (int i = 0; i < ColumnConfigs.Count; i++)
        {
            _propertiesColumnConfigsPairs.Add(ColumnConfigs[i].DisplayName, ColumnConfigs[i]);
        }
        return base.OnInitializedAsync();
    }

    public void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    public void Submit()
    {
        if (_selectedGroupBy.IsNullOrEmpty())
        {
            return;
        }

        if (!_propertiesColumnConfigsPairs.TryGetValue(_selectedGroupBy, out Options.ColumnConfig<TItem> columnConfig))
        {
            return;
        }
        var groupingList = Items.GroupByReflected(columnConfig).ToList();
        var groupList = GroupingToGroupConverter.Convert(groupingList);

        MudDialog.Close(DialogResult.Ok(groupList));

    }
}
@typeparam TItem
@using System.Reflection;

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.Group" />
            Group By
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect T="string" Label="Group By" @bind-Value="_selectedGroupBy">
            @for (int i = 0; i < Properties.Length; i++)
            {
                int local = i;
                if (!Headers.IsGroupable(local))
                {
                    continue;
                }
                <MudSelectItem Value="@Headers.Names[local]" />
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public Header Headers { get; set; }

    [Parameter]
    public PropertyInfo[] Properties { get; set; }

    private string _selectedGroupBy;
    private Dictionary<string, string> headersPropertiesPairs;


    protected override Task OnInitializedAsync()
    {
        headersPropertiesPairs = new Dictionary<string, string>();
        for (int i = 0; i < Properties.Length; i++)
        {
            headersPropertiesPairs.Add(Headers.Names[i], Properties[i].Name);
        }
        return base.OnInitializedAsync();
    }


    public void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    public void Submit()
    {
        string name;
        if (!headersPropertiesPairs.TryGetValue(_selectedGroupBy, out name))
        {
            return;
        }
        var groupingList = ScanAppTableGroup<TItem>.GroupBy(Items, name).ToList();

        MudDialog.Close(DialogResult.Ok(groupingList));
    }
}

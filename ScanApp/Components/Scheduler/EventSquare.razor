@using ScanApp.Models.Scheduler
@using ScanApp.Common.Extensions
@inject IDialogService DialogService 
<style>
    .square {
        height: 70px;
        background-color: #479cc8;
    }

    #empty.square {
        background-color: #ededed;
    }

    #empty.square:hover > #fading-background {
        background-color: #ffffff;
        opacity: 1.0;
    }

    #fading-background {
        opacity: 0;
        height: 100%;
        transition: all 300ms ease-in-out;
    }

    .control-camera {
        float: left;
        height: 60%;
        width: 100%;
        background-color: #52b1e3;
        padding-top: 9%;
    }

    .control-camera:hover {
        background-color: #4ca5d4;
        cursor: grab;
    }

    .click-event {
        float: left;
        height: 40%;
        width: 50%;
        background-color: #52b1e3;
        padding-top: 3%;
    }

    .click-event:hover {
        background-color: #4ca5d4;
        cursor: pointer;
    }
</style>

@if (Appointment is null)
{
    <div class="square" id="empty" @onclick="@SquareClicked">
        <div id="fading-background">
        </div>
    </div>
}
else
{
    if (_showEventControls)
    {
        <div class="square">
            <div class="control-camera" @onclick="@SquareClicked">
                <MudIcon Icon="@Icons.Material.Outlined.ControlCamera"></MudIcon>
            </div>
            <div class="click-event" @onclick="@DeleteEvent">
                <MudIcon Icon="@Icons.Material.Outlined.Delete" Size="Size.Small"></MudIcon>
            </div>
            <div class="click-event" @onclick="@EditEvent">
                <MudIcon Icon="@Icons.Material.Outlined.Edit" Size="Size.Small"></MudIcon>
            </div>
        </div>
    }
    else
    {
    <div class="square" @onclick="@SquareClicked" style="text-align: left;">
        <div style="width: 100%; height: 35%; padding-left: 5px; font-size: smaller; color: white;">
            @Appointment.Spedition
        </div>
        <div style="width: 100%; height: 35%; padding-left: 5px; font-size: smaller; color: white;">
            @Appointment.Company
        </div>
        <div style="width: 100%; height: 30%; padding-left: 5px; background-color: #52b1e3; font-size: smaller; color: white;">
            @Appointment.TimeSlot.ToString()
        </div>
    </div>
    }
}


@code {

    [Parameter]
    public HesAppointmentModel Appointment { get; set; }

    [Parameter]
    public DateTime DateFrom { get; set; }

    [Parameter]
    public DateTime DateTo { get; set; }

    [Parameter]
    public EventCallback<HesAppointmentModel> DataHasChanged { get; set; }

    [Parameter]
    public EventCallback<HesAppointmentModel> AppointmentDeleted { get; set; }

    private bool _showEventControls;

    private void SquareClicked()
    {
        if (Appointment is null)
        {
            //OpenAddAppointmentDialog();
            Console.WriteLine("Opening add dialog..");
            return;
        }
        ToggleEventControls();
    }

    private void ToggleEventControls()
    {
        _showEventControls = !_showEventControls;
    }

    private async Task EditEvent()
    {
        var appointmentCopy = Appointment.Copy();
        var parameter = new DialogParameters()
        {
            ["Appointment"] = appointmentCopy
        };

        var dialog = DialogService.Show<EditAppointmentDialog>("Edit", parameter, new DialogOptions { MaxWidth = MaxWidth.Large });
        var result = await dialog.Result;

        if (result.Cancelled)
        {
            return;
        }
        Appointment = appointmentCopy.Copy();
        await DataHasChanged.InvokeAsync(Appointment);
    }

    private async Task DeleteEvent()
    {
        var parameter = new DialogParameters()
        {
            ["Appointment"] = Appointment
        };

        var dialog = DialogService.Show<DeleteAppointmentDialog>("Delete", parameter, new DialogOptions {MaxWidth = MaxWidth.Large});
        var result = await dialog.Result;

        if (result.Cancelled)
        {
            return;
        }
        await AppointmentDeleted.InvokeAsync(Appointment);
    }
}
